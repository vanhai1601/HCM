package vn.com.mbbank.services.impl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.ResponseEntity;import org.springframework.security.core.Authentication;import org.springframework.stereotype.Service;import vn.com.mbbank.core.config.I18n;import vn.com.mbbank.core.dto.response.BaseResultSelect;import vn.com.mbbank.dto.BankAccountsDTO;import vn.com.mbbank.dto.EmployeesDTO;import vn.com.mbbank.dto.ParamBankAccountDTO;import vn.com.mbbank.entities.HrBankAccountsEntity;import vn.com.mbbank.entities.HrEmployeeInfosEntity;import vn.com.mbbank.repositories.impl.BankAccountsRepositoryImpl;import vn.com.mbbank.repositories.jpa.HrBankAccountsRepositoryJPA;import vn.com.mbbank.repositories.jpa.HrEmployeesInfoRepositoryJPA;import vn.com.mbbank.services.BankAccountsService;import vn.com.mbbank.utils.Constants;import vn.com.mbbank.utils.ErrorApp;import vn.com.mbbank.utils.ResponseUtils;import vn.com.mbbank.utils.Utils;import java.util.*;/** * Autogen class: Lớp thao tác danh sach tai khoan ngan hang cua nhan vien * * @author ToolGen * @date Sun Mar 20 21:47:12 ICT 2022 */@Servicepublic class BankAccountsServiceImpl implements BankAccountsService {    @Autowired    private BankAccountsRepositoryImpl bankAccountsRepositoryImpl;    @Autowired    private HrBankAccountsRepositoryJPA hrBankAccountsRepositoryJPA;    @Autowired    private HrEmployeesInfoRepositoryJPA employeesInfoRepositoryJPA;    @Override    public List<BankAccountsDTO> getBankAccounts(Long id) {        List<BankAccountsDTO> dataResult = bankAccountsRepositoryImpl.getBankAccounts(id);        return dataResult;    }    @Override    public ResponseEntity<Object> saveBankAccounts(ParamBankAccountDTO dto, Long employeeId, Authentication authentication) throws Exception {        if (dto.getData() != null && !dto.getData().isEmpty()) {            // thuc hien validate tham so dau vao            Map<String, Integer> mapAccount = new HashMap<>();            Map<Integer, Integer> mapIsPaymentAccount = new HashMap<>();            for (BankAccountsDTO bankAccountsDTO : dto.getData()) {                if(mapAccount.get(bankAccountsDTO.getAccountNo().trim()) == null){                    mapAccount.put(bankAccountsDTO.getAccountNo().trim(), 1);                } else {                    return ResponseUtils.getResponseEntity(ErrorApp.INVALID_PARAM.getCode(), I18n.getMessage("employee.validate.accountNo.input"));                }                                if(bankAccountsDTO.getIsPaymentAccount() == 1                        && mapIsPaymentAccount.get(Utils.NVL(bankAccountsDTO.getIsPaymentAccount())) != null) {                    return ResponseUtils.getResponseEntity(ErrorApp.INVALID_PARAM.getCode(), I18n.getMessage("employee.validate.accountNo.isPaymentAccount"));                } else if(bankAccountsDTO.getIsPaymentAccount() == 1                        && mapIsPaymentAccount.get(Utils.NVL(bankAccountsDTO.getIsPaymentAccount())) == null) {                    mapIsPaymentAccount.put(1, 1);                }            }                        // xu ly luu tru du lieu            Date currentDate = new Date();            for (BankAccountsDTO bankAccountsDTO : dto.getData()) {                ResponseEntity<Object> resultValidate = this.isExistBankAccount(bankAccountsDTO);                if (resultValidate != null) {                    return resultValidate;                }                HrBankAccountsEntity entity;                if (Utils.isNullObject(bankAccountsDTO.getBankAccountId())) {                    entity = new HrBankAccountsEntity();                    entity.setCreateDate(currentDate);                    entity.setCreatedBy(Utils.getUserNameLogin(authentication));                } else {                    entity = hrBankAccountsRepositoryJPA.getById(bankAccountsDTO.getBankAccountId());                    entity.setLastUpdateDate(currentDate);                    entity.setLastUpdatedBy(Utils.getUserNameLogin(authentication));                }                entity.setEmployeeId(employeeId);                entity.setAccountTypeCode(bankAccountsDTO.getAccountTypeCode().trim());                entity.setAccountNo(bankAccountsDTO.getAccountNo().trim());                entity.setBankId(bankAccountsDTO.getBankId());                entity.setBankBranch(bankAccountsDTO.getBankBranch().trim());                entity.setIsPaymentAccount(bankAccountsDTO.getIsPaymentAccount());                entity.setFlagStatus(Constants.STATUS.IS_ACTIVE);                hrBankAccountsRepositoryJPA.save(entity);                if (entity.getIsPaymentAccount() != null && entity.getIsPaymentAccount().equals(1)) {                    HrEmployeeInfosEntity hrEmployeeInfosEntity = bankAccountsRepositoryImpl.get(HrEmployeeInfosEntity.class, employeeId);                    hrEmployeeInfosEntity.setBankId(bankAccountsDTO.getBankId());                    hrEmployeeInfosEntity.setBankAccountNo(bankAccountsDTO.getAccountNo());                    employeesInfoRepositoryJPA.save(hrEmployeeInfosEntity);                }            }        }                // thuc hien xoa ban ghi nguoi dung muon xoa        if (dto.getIdDelete() != null && !dto.getIdDelete().isEmpty()) {            for (Long id : dto.getIdDelete()) {                Optional<HrBankAccountsEntity> optional = hrBankAccountsRepositoryJPA.findById(id);                if (optional.isPresent()) {                    HrBankAccountsEntity entityDelete = optional.get();                    entityDelete.setFlagStatus(Constants.STATUS.IS_NOT_ACTIVE);                    hrBankAccountsRepositoryJPA.save(entityDelete);                }            }        }                return ResponseUtils.getResponseSucessEntity(null);    }    private ResponseEntity<Object> isExistBankAccount(BankAccountsDTO bankAccountsDTO) {        List<BankAccountsDTO> listAccountNoExist = bankAccountsRepositoryImpl.getListAccountNoExist(bankAccountsDTO.getAccountNo().trim(), bankAccountsDTO.getBankAccountId());        if (listAccountNoExist != null && !listAccountNoExist.isEmpty()) {            String errorMsg = I18n.getMessage("employee.validate.accountNo.isExist", bankAccountsDTO.getAccountNo(), listAccountNoExist.get(0).getFullName(), listAccountNoExist.get(0).getEmployeeCode());            return ResponseUtils.getResponseEntity(ErrorApp.INVALID_PARAM.getCode(), errorMsg);        }        return null;    }    @Override    public ResponseEntity<Object> searchBankAccounts(EmployeesDTO dto) {        BaseResultSelect result = bankAccountsRepositoryImpl.searchBankAccounts(dto);        return ResponseUtils.getResponseSucessEntity(result);    }}