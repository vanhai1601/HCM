package vn.com.mbbank.services.impl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.ResponseEntity;import org.springframework.security.core.Authentication;import org.springframework.stereotype.Service;import vn.com.mbbank.core.dto.response.BaseResultSelect;import vn.com.mbbank.dto.EmployeeProfilesDTO;import vn.com.mbbank.entities.HrEmployeeProfilesEntity;import vn.com.mbbank.repositories.impl.EmployeeProfilesRepositoryImpl;import vn.com.mbbank.repositories.jpa.HrEmployeeProfilesRepositoryJPA;import vn.com.mbbank.services.EmployeeProfilesService;import vn.com.mbbank.utils.Constants;import vn.com.mbbank.utils.ErrorApp;import vn.com.mbbank.utils.ResponseUtils;import vn.com.mbbank.utils.Utils;import javax.swing.text.html.Option;import java.util.Date;import java.util.List;import java.util.Optional;/** * Autogen class: Lớp thao tác danh sach nhan vien * * @author ToolGen * @date Sun Mar 20 21:28:47 ICT 2022 */@Servicepublic class EmployeeProfilesServiceImpl implements EmployeeProfilesService {    @Autowired    private EmployeeProfilesRepositoryImpl employeeProfilesRepositoryImpl;    @Autowired    private HrEmployeeProfilesRepositoryJPA hrEmployeeProfilesRepositoryJPA;    @Override    public BaseResultSelect getListDataByEmpId(EmployeeProfilesDTO dto, Authentication authentication) {        return employeeProfilesRepositoryImpl.getListDataByEmpId(dto);    }    @Override    public ResponseEntity<Object> saveProfiles(EmployeeProfilesDTO employeeProfilesDTO, Authentication authentication) throws Exception {        Optional<HrEmployeeProfilesEntity> optional = hrEmployeeProfilesRepositoryJPA.findById(employeeProfilesDTO.getEmployeeProfileId());        HrEmployeeProfilesEntity entity;        if (optional.isPresent()) {            entity = optional.get();            entity.setProfileTypeCode(employeeProfilesDTO.getProfileTypeCode());            entity.setNote(employeeProfilesDTO.getNote());            entity.setIsHardDocument(employeeProfilesDTO.getIsHardDocument());            entity.setLastUpdateDate(new Date());            entity.setLastUpdatedBy(Utils.getUserNameLogin(authentication));        } else {            entity = new HrEmployeeProfilesEntity();            Utils.copyProperties(entity, employeeProfilesDTO);            entity.setCreateDate(new Date());            entity.setCreatedBy(Utils.getUserNameLogin(authentication));        }        entity.setFlagStatus(Constants.STATUS.IS_ACTIVE);        hrEmployeeProfilesRepositoryJPA.save(entity);        return ResponseUtils.getResponseSucessEntity(null);    }    @Override    public ResponseEntity<Object> deleteProfiles(Long id, Authentication authentication) {        Optional<HrEmployeeProfilesEntity> optional = hrEmployeeProfilesRepositoryJPA.findById(id);        if (!optional.isPresent()) {            return ResponseUtils.getResponseEntity(ErrorApp.BAD_REQUEST);        }        HrEmployeeProfilesEntity entity = optional.get();        entity.setFlagStatus(Constants.STATUS.IS_NOT_ACTIVE);        entity.setLastUpdateDate(new Date());        entity.setLastUpdatedBy(Utils.getUserNameLogin(authentication));        hrEmployeeProfilesRepositoryJPA.save(entity);        return ResponseUtils.getResponseSucessEntity(null);    }}