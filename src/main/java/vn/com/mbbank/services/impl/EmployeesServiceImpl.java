package vn.com.mbbank.services.impl;import org.apache.commons.lang.StringUtils;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.springframework.beans.factory.annotation.Value;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.core.Authentication;import org.springframework.web.multipart.MultipartFile;import vn.com.mbbank.core.config.I18n;import vn.com.mbbank.core.dto.response.BaseResultSelect;import vn.com.mbbank.entities.HrEmployeeInfosEntity;import vn.com.mbbank.entities.HrEmployeesEntity;import vn.com.mbbank.entities.HrPhoneContactsEntity;import vn.com.mbbank.entities.VLookupEntity;import vn.com.mbbank.repositories.impl.LookupValuesRepositoryImpl;import vn.com.mbbank.repositories.jpa.HrEmployeesInfoRepositoryJPA;import vn.com.mbbank.repositories.jpa.HrEmployeesRepositoryJPA;import vn.com.mbbank.repositories.jpa.HrPhoneContractsRepositoryJPA;import vn.com.mbbank.services.EmployeesService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import vn.com.mbbank.utils.Constants;import vn.com.mbbank.utils.ErrorApp;import vn.com.mbbank.utils.ResponseUtils;import vn.com.mbbank.utils.Utils;import vn.com.mbbank.repositories.impl.EmployeesRepositoryImpl;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.nio.file.Files;import java.util.ArrayList;import java.util.Base64;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Optional;import javax.servlet.http.HttpServletRequest;import org.springframework.core.io.ResourceLoader;import vn.com.mbbank.config.FileStorageConfig;import vn.com.mbbank.core.utils.DynamicExport;import vn.com.mbbank.core.utils.ImportExcel;import vn.com.mbbank.dto.EmployeesDTO;import vn.com.mbbank.dto.HrEmployeeInfosDTO;import vn.com.mbbank.dto.ImportResultDTO;import vn.com.mbbank.dto.LookupValuesDTO;import vn.com.mbbank.dto.PersonalInfoDTO;import vn.com.mbbank.entities.HrDocumentTypesEntity;import vn.com.mbbank.entities.HrManagerProcessEntity;import vn.com.mbbank.entities.HrWorkProcessEntity;import vn.com.mbbank.entities.MpOrganizationsEntity;import vn.com.mbbank.entities.MpPositionsEntity;import vn.com.mbbank.services.CommonUtilsService;/** * Autogen class: Lớp thao tác danh sach nhan vien * * @author ToolGen * @date Sun Mar 20 21:28:47 ICT 2022 */@Servicepublic class EmployeesServiceImpl implements EmployeesService {    private final Logger LOGGER = LogManager.getLogger(EmployeesServiceImpl.class);    @Value("${employee.image.path}")    String imagePath;    @Autowired    private EmployeesRepositoryImpl employeesRepositoryImpl;    @Autowired    private HrEmployeesRepositoryJPA employeesRepositoryJPA;    @Autowired    private HrEmployeesInfoRepositoryJPA hrEmployeesInfoRepositoryJPA;    @Autowired    private HrPhoneContractsRepositoryJPA hrPhoneContractsRepositoryJPA;    @Autowired    private LookupValuesRepositoryImpl lookupValuesRepositoryImpl;    @Autowired    ResourceLoader resourceLoader;    @Autowired    private FileStorageConfig fileStorageConfig;    @Autowired    private CommonUtilsService commonUtilsService;    @Override    public EmployeesDTO getPersonalInformation(Long employeeId) {//        try {        EmployeesDTO employeesDTO = employeesRepositoryImpl.getPersonalInfomation(employeeId);        if (employeesDTO == null) {            return null;        }        employeesDTO.setListMobileNumber(employeesRepositoryImpl.findByProperties(HrPhoneContactsEntity.class, "employeeId", employeeId, "flagStatus", Constants.STATUS.IS_ACTIVE));//            if (StringUtils.isNotEmpty(employeesDTO.getImagePath())) {//                File fileAvatar = new File(imagePath + "/" + employeesDTO.getImagePath());//                if (fileAvatar.exists()) {//                    byte[] fileContent = Files.readAllBytes(fileAvatar.toPath());//                    String encodedString = Base64.getEncoder().encodeToString(fileContent);//                    employeesDTO.setAvatar(encodedString);//                }//            }        return employeesDTO;//        } catch (Exception ex) {//            return null;//        }    }    @Override    public ResponseEntity<Object> savePersonalInformation(PersonalInfoDTO dto, Authentication authentication) throws Exception {        HrEmployeesEntity employeeEntity = employeesRepositoryJPA.getById(dto.getEmployeeId());        if (!Utils.isNullOrEmpty(dto.getEmail()) && !Utils.isValidEmail(dto.getEmail())) {            String errorMsg = I18n.getMessage("employee.validate.email.invalid");            return ResponseUtils.getResponseEntity(ErrorApp.BAD_REQUEST.getCode(), errorMsg);        }        for (HrPhoneContactsEntity hrPhoneContactsDTO : dto.getListMobileNumber()) {            if (hrPhoneContactsDTO.getIsMain().equals(1L)) {                employeeEntity.setMobileNumber(hrPhoneContactsDTO.getPhoneNumber());            }        }        Utils.copyProperties(employeeEntity, dto);        employeeEntity.setFullName(Utils.filterEmployeeName(dto.getFullName()));        employeesRepositoryJPA.save(employeeEntity);        // xu xoa thong tin sdt da luu truoc do        employeesRepositoryImpl.deleteById(dto.getEmployeeId(), HrPhoneContactsEntity.class, "employee_id");        for (HrPhoneContactsEntity phoneContactEntity : dto.getListMobileNumber()) {            phoneContactEntity.setEmployeeId(dto.getEmployeeId());            phoneContactEntity.setFlagStatus(Constants.STATUS.IS_ACTIVE);            hrPhoneContractsRepositoryJPA.save(phoneContactEntity);        }        return ResponseUtils.getResponseSucessEntity(null);    }    @Override    public ResponseEntity<Object> saveContactInfo(HrEmployeeInfosDTO dto, Authentication authentication) throws Exception {        List<VLookupEntity> pernamentProvinceEntity = lookupValuesRepositoryImpl.findByProperties(VLookupEntity.class, "typeCode", Constants.LOOKUP_CODES.TINH, "code", dto.getPernamentProvinceCode());        if (pernamentProvinceEntity == null || pernamentProvinceEntity.isEmpty()) {            String errorMsg = I18n.getMessage("employeeInfo.validate.contact.province");            return ResponseUtils.getResponseEntity(ErrorApp.BAD_REQUEST.getCode(), errorMsg);        }        List<VLookupEntity> pernamentDistrictEntity = lookupValuesRepositoryImpl.findByProperties(VLookupEntity.class, "typeCode", Constants.LOOKUP_CODES.HUYEN, "code", dto.getPernamentDistrictCode());        if (pernamentDistrictEntity == null || pernamentDistrictEntity.isEmpty()) {            String errorMsg = I18n.getMessage("employeeInfo.validate.contact.district");            return ResponseUtils.getResponseEntity(ErrorApp.BAD_REQUEST.getCode(), errorMsg);        }        List<VLookupEntity> pernamentWardEntity = lookupValuesRepositoryImpl.findByProperties(VLookupEntity.class, "typeCode", Constants.LOOKUP_CODES.XA, "code", dto.getPernamentWardCode());        if (pernamentWardEntity == null || pernamentWardEntity.isEmpty()) {            String errorMsg = I18n.getMessage("employeeInfo.validate.contact.ward");            return ResponseUtils.getResponseEntity(ErrorApp.BAD_REQUEST.getCode(), errorMsg);        }        List<VLookupEntity> currentProvinceEntity = lookupValuesRepositoryImpl.findByProperties(VLookupEntity.class, "typeCode", Constants.LOOKUP_CODES.TINH, "code", dto.getCurrentProvinceCode());        if (currentProvinceEntity == null || currentProvinceEntity.isEmpty()) {            String errorMsg = I18n.getMessage("employeeInfo.validate.contact.province");            return ResponseUtils.getResponseEntity(ErrorApp.BAD_REQUEST.getCode(), errorMsg);        }        List<VLookupEntity> currentDistrictEntity = lookupValuesRepositoryImpl.findByProperties(VLookupEntity.class, "typeCode", Constants.LOOKUP_CODES.HUYEN, "code", dto.getCurrentDistrictCode());        if (currentDistrictEntity == null || currentDistrictEntity.isEmpty()) {            String errorMsg = I18n.getMessage("employeeInfo.validate.contact.district");            return ResponseUtils.getResponseEntity(ErrorApp.BAD_REQUEST.getCode(), errorMsg);        }        List<VLookupEntity> currentWardEntity = lookupValuesRepositoryImpl.findByProperties(VLookupEntity.class, "typeCode", Constants.LOOKUP_CODES.XA, "code", dto.getCurrentWardCode());        if (currentWardEntity == null || currentWardEntity.isEmpty()) {            String errorMsg = I18n.getMessage("employeeInfo.validate.contact.ward");            return ResponseUtils.getResponseEntity(ErrorApp.BAD_REQUEST.getCode(), errorMsg);        }        Optional<HrEmployeeInfosEntity> optional = hrEmployeesInfoRepositoryJPA.findById(dto.getEmployeeId());        HrEmployeeInfosEntity entity;        if (optional.isPresent()) {            entity = optional.get();            entity.setEmployeeId(dto.getEmployeeId());            entity.setPernamentProvinceCode(dto.getPernamentProvinceCode());            entity.setPernamentDistrictCode(dto.getPernamentDistrictCode());            entity.setPernamentWardCode(dto.getPernamentWardCode());            entity.setPernamentDetail(dto.getPernamentDetail());            entity.setCurrentProvinceCode(dto.getCurrentProvinceCode());            entity.setCurrentDistrictCode(dto.getCurrentDistrictCode());            entity.setCurrentWardCode(dto.getCurrentWardCode());            entity.setCurrentDetail(dto.getCurrentDetail());        } else {            entity = new HrEmployeeInfosEntity();            Utils.copyProperties(entity, dto);        }        hrEmployeesInfoRepositoryJPA.save(entity);        HrEmployeesEntity employeesEntity;        employeesEntity = employeesRepositoryJPA.getById(dto.getEmployeeId());        employeesEntity.setPlaceOfBirth(dto.getPlaceOfBirth());        employeesEntity.setOriginalAddress(dto.getOriginalAddress());        employeesEntity.setPernamentAddress(dto.getPernamentDetail() + ", " + pernamentWardEntity.get(0).getLabel() + ", " + pernamentDistrictEntity.get(0).getLabel() + ", " + pernamentProvinceEntity.get(0).getLabel());        employeesEntity.setCurrentAddress(dto.getCurrentDetail() + ", " + currentWardEntity.get(0).getLabel() + ", " + currentDistrictEntity.get(0).getLabel() + ", " + currentProvinceEntity.get(0).getLabel());        employeesRepositoryJPA.save(employeesEntity);        return ResponseUtils.getResponseSucessEntity(null);    }    @Override    public Object getPartyArmy(Long employeeId) {        return employeesRepositoryImpl.getPartyArmy(employeeId);    }    @Override    public ResponseEntity<Object> savePartyArmy(HrEmployeeInfosDTO dto, Authentication authentication) throws Exception {        Optional<HrEmployeeInfosEntity> optional = hrEmployeesInfoRepositoryJPA.findById(dto.getEmployeeId());        HrEmployeeInfosEntity entity;        if (optional.isPresent()) {            entity = optional.get();            entity.setEmployeeId(dto.getEmployeeId());            entity.setPartyDate(dto.getPartyDate());            entity.setPartyOfficialDate(dto.getPartyOfficialDate());            entity.setPartyPlace(dto.getPartyPlace());            entity.setArmyJoinDate(dto.getArmyJoinDate());            entity.setArmyLevelCode(dto.getArmyLevelCode());        } else {            entity = new HrEmployeeInfosEntity();            Utils.copyProperties(entity, dto);        }        hrEmployeesInfoRepositoryJPA.save(entity);        return ResponseUtils.getResponseSucessEntity(null);    }    @Override    public HrEmployeeInfosDTO getContactInfo(Long employeeId) {        return employeesRepositoryImpl.getContactInfo(employeeId);    }    @Override    public ResponseEntity<Object> deleteAvatar(Long employeeId, Authentication authentication) {        try {            HrEmployeesEntity employeeEntity = employeesRepositoryJPA.getById(employeeId);            if (employeeEntity == null) {                String errorMsg = I18n.getMessage("employee.not.exists");                return ResponseUtils.getResponseEntity(ErrorApp.BAD_REQUEST.getCode(), errorMsg);            }            if (StringUtils.isEmpty(employeeEntity.getImagePath())) {                return ResponseUtils.getResponseSucessEntity(null);            }            File fileImage = new File(imagePath + "/" + employeeEntity.getImagePath());            if (fileImage.exists()) {                Files.deleteIfExists(fileImage.toPath());            }            employeeEntity.setImagePath(null);            employeesRepositoryJPA.save(employeeEntity);            return ResponseUtils.getResponseSucessEntity(null);        } catch (IOException ex) {            return ResponseUtils.getResponseEntity(HttpStatus.INTERNAL_SERVER_ERROR.value(), ex.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);        }    }    @Override    public ResponseEntity<Object> uploadAvatar(Long employeeId, MultipartFile fileAvatar, Authentication authentication) {        try {            HrEmployeesEntity employeeEntity = employeesRepositoryJPA.getById(employeeId);            if (employeeEntity == null) {                String errorMsg = I18n.getMessage("employee.not.exists");                return ResponseUtils.getResponseEntity(ErrorApp.BAD_REQUEST.getCode(), errorMsg);            }            if (StringUtils.isNotEmpty(employeeEntity.getImagePath())) {                File fileImage = new File(imagePath + "/" + employeeEntity.getImagePath());                if (fileImage.exists()) {                    Files.deleteIfExists(fileImage.toPath());                }            }            String extension = Utils.getExtension(fileAvatar.getOriginalFilename());            if (StringUtils.isEmpty(extension) || !("jpg".equalsIgnoreCase(extension) || "png".equalsIgnoreCase(extension))) {                String errorMsg = I18n.getMessage("employee.avatar.not.valid");                return ResponseUtils.getResponseEntity(ErrorApp.BAD_REQUEST.getCode(), errorMsg);            }            String fileName = employeeEntity.getEmployeeId() + "." + extension;            File file = new File(imagePath + "/" + fileName);            FileOutputStream fos = new FileOutputStream(file);            fos.write(fileAvatar.getBytes());            fos.close();            employeeEntity.setImagePath(fileName);            employeesRepositoryJPA.save(employeeEntity);            return ResponseUtils.getResponseSucessEntity(null);        } catch (IOException ex) {            return ResponseUtils.getResponseEntity(HttpStatus.INTERNAL_SERVER_ERROR.value(), ex.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);        }    }    @Override    public ResponseEntity<Object> getAvatar(Long employeeId) throws IOException {        HrEmployeesEntity employeeEntity = employeesRepositoryImpl.get(HrEmployeesEntity.class, employeeId);        String base64Image = null;        if (employeeEntity != null && StringUtils.isNotEmpty(employeeEntity.getImagePath())) {            File fileAvatar = new File(imagePath + "/" + employeeEntity.getImagePath());            if (fileAvatar.exists()) {                byte[] fileContent = Files.readAllBytes(fileAvatar.toPath());                base64Image = Base64.getEncoder().encodeToString(fileContent);            }        }        return ResponseUtils.getResponseSucessEntity(base64Image);    }    @Override    public ResponseEntity<Object> getEmpDataPicker(EmployeesDTO dto) {        BaseResultSelect result = employeesRepositoryImpl.searchEmployee(dto);        return ResponseUtils.getResponseSucessEntity(result);    }    @Override    public ResponseEntity<Object> searchPersonalEmployee(EmployeesDTO dto, Authentication authentication) {        BaseResultSelect result = employeesRepositoryImpl.searchPersonalEmployee(dto);        return ResponseUtils.getResponseSucessEntity(result);    }    @Override    public String exportTemplateImportAddEmployee(Authentication authentication) throws Exception {        String pathTemplate = "template/import/employee/BM_Nhapmoi_NhanVien.xlsx";        DynamicExport dynamicExport = new DynamicExport(pathTemplate, 2, true);        int activeSheet = 1;        String[] arrTypeCode = new String[]{            Constants.LOOKUP_CODES.GIOI_TINH,            Constants.LOOKUP_CODES.TINH_TRANG_HON_NHAN,            Constants.LOOKUP_CODES.QUOC_GIA,            Constants.LOOKUP_CODES.DAN_TOC,            Constants.LOOKUP_CODES.TON_GIAO,            Constants.LOOKUP_CODES.DOI_TUONG_CV,            Constants.LOOKUP_CODES.LEVEL_NV,            Constants.LOOKUP_CODES.LOAI_GIAY_TO        };        for (String typeCode : arrTypeCode) {            dynamicExport.setActiveSheet(activeSheet++);            List<VLookupEntity> listVLookup = employeesRepositoryImpl.findByProperty(VLookupEntity.class, "typeCode", typeCode, "code");            int row = 1;            int col = 0;            for (VLookupEntity entity : listVLookup) {                col = 0;                dynamicExport.setText(String.valueOf(row), col++, row);                dynamicExport.setText(entity.getLabel(), col, row++);            }            dynamicExport.setCellFormat(0, 0, row - 1, col, DynamicExport.BORDER_FORMAT);        }        //sheet Loai QD        dynamicExport.setActiveSheet(activeSheet++);        List<HrDocumentTypesEntity> listDocument = employeesRepositoryImpl.findAll(HrDocumentTypesEntity.class);        int row = 1;        int col = 0;        for (HrDocumentTypesEntity entity : listDocument) {            col = 0;            dynamicExport.setText(String.valueOf(row), col++, row);            dynamicExport.setText(entity.getName(), col, row++);        }        dynamicExport.setCellFormat(0, 0, row - 1, col, DynamicExport.BORDER_FORMAT);        //sheet Don vi        Long startTime = System.currentTimeMillis();        dynamicExport.setActiveSheet(activeSheet++);        List<MpOrganizationsEntity> listOrg = employeesRepositoryImpl.findAll(MpOrganizationsEntity.class);        LOGGER.info("get MpOrganizationsEntity|time response=" + (System.currentTimeMillis() - startTime));        row = 1;        for (MpOrganizationsEntity entity : listOrg) {            col = 0;            dynamicExport.setText(String.valueOf(row), col++, row);            dynamicExport.setText(entity.getOrgCode(), col++, row);            dynamicExport.setText(entity.getOrgName(), col++, row);            dynamicExport.setText("X", col++, row);            dynamicExport.setText(Utils.convertDateToString(entity.getFromDate()), col++, row);            dynamicExport.setText(Utils.convertDateToString(entity.getToDate()), col, row++);        }        dynamicExport.setCellFormat(0, 0, row - 1, col, DynamicExport.BORDER_FORMAT);        //sheet chuc danh        dynamicExport.setActiveSheet(activeSheet++);        List<MpPositionsEntity> listPosition = employeesRepositoryImpl.findAll(MpPositionsEntity.class);        row = 1;        for (MpPositionsEntity entity : listPosition) {            col = 0;            dynamicExport.setText(String.valueOf(row), col++, row);            dynamicExport.setText(entity.getPosName(), col, row++);        }        dynamicExport.setCellFormat(0, 0, row - 1, col, DynamicExport.BORDER_FORMAT);        //sheet Tinh/Huyen/Xa        dynamicExport.setActiveSheet(activeSheet++);        startTime = System.currentTimeMillis();        List<LookupValuesDTO> listProvinceDistrictWard = lookupValuesRepositoryImpl.getListFullProvinceDistrictWard();        LOGGER.info("get listProvinceDistrictWard|time response=" + (System.currentTimeMillis() - startTime));        startTime = System.currentTimeMillis();        row = 1;        for (LookupValuesDTO dto : listProvinceDistrictWard) {            col = 0;            dynamicExport.setText(String.valueOf(row), col++, row);            dynamicExport.setText(dto.getProvinceLabel(), col++, row);            dynamicExport.setText(dto.getDistrictLabel(), col++, row);            dynamicExport.setText(dto.getWardLabel(), col, row++);        }        dynamicExport.setCellFormat(0, 0, row - 1, col, DynamicExport.BORDER_FORMAT);        LOGGER.info("get process province|time response=" + (System.currentTimeMillis() - startTime));        startTime = System.currentTimeMillis();        dynamicExport.setActiveSheet(0);        String fileName = commonUtilsService.getFilePathExport(authentication, "BM_Nhapmoi_NhanVien.xlsx");        dynamicExport.exportFile(fileName);        LOGGER.info("get getFilePathExport|time response=" + (System.currentTimeMillis() - startTime));        return fileName;    }    @Override    public ResponseEntity<Object> importAddEmployee(MultipartFile files, Authentication authentication, HttpServletRequest req) throws Exception {        String pathTemplate = "template/import/employee/BM_Nhapmoi_NhanVien.xml";        ImportExcel importExcel = new ImportExcel(pathTemplate, req);        List<Object[]> dataList = new ArrayList();        String filePath = fileStorageConfig.getExportFolder() + Utils.getUserNameLogin(authentication) + "_BM_Nhapmoi_NhanVien";        if (!importExcel.validateCommon(req, files.getBytes(), dataList, filePath)) {            ImportResultDTO importResultDTO = new ImportResultDTO();            importResultDTO.setErrorFile(importExcel.getFileErrorDescription(files, fileStorageConfig.getExportFolder(), authentication));            importResultDTO.setErrorList(importExcel.getErrorList());            Integer importResult = (Integer) req.getAttribute("importResult");            String messageError = I18n.getMessage("import.importError" + importResult);            return ResponseUtils.getResponseEntity(ErrorApp.INVALID_FILE.getCode(), messageError, importResultDTO);        }        int row = 0;        List<HrEmployeesEntity> listSave = new ArrayList<>();        Map<String, String> mapGender = lookupValuesRepositoryImpl.getMapLookupByType(Constants.LOOKUP_CODES.GIOI_TINH, null);        Map<String, String> mapMaritalStatus = lookupValuesRepositoryImpl.getMapLookupByType(Constants.LOOKUP_CODES.TINH_TRANG_HON_NHAN, null);        Map<String, String> mapNation = lookupValuesRepositoryImpl.getMapLookupByType(Constants.LOOKUP_CODES.QUOC_GIA, null);        Map<String, String> mapEthnic = lookupValuesRepositoryImpl.getMapLookupByType(Constants.LOOKUP_CODES.DAN_TOC, null);        Map<String, String> mapReligion = lookupValuesRepositoryImpl.getMapLookupByType(Constants.LOOKUP_CODES.TON_GIAO, null);        Map<String, String> mapEmpType = lookupValuesRepositoryImpl.getMapLookupByType(Constants.LOOKUP_CODES.DOI_TUONG_CV, null);        Map<String, String> mapLevel = lookupValuesRepositoryImpl.getMapLookupByType(Constants.LOOKUP_CODES.LEVEL_NV, null);        Map<String, String> mapPersonalIdType = lookupValuesRepositoryImpl.getMapLookupByType(Constants.LOOKUP_CODES.LOAI_GIAY_TO, null);        List<HrDocumentTypesEntity> listDocument = employeesRepositoryImpl.findAll(HrDocumentTypesEntity.class);        Map<String, Long> mapDocumentType = new HashMap<>();        for (HrDocumentTypesEntity documentEntity : listDocument) {            mapDocumentType.put(documentEntity.getName(), documentEntity.getDocumentTypeId());        }        List<MpPositionsEntity> listPosition = employeesRepositoryImpl.findAll(MpPositionsEntity.class);        Map<String, Long> mapPosition = new HashMap<>();        for (MpPositionsEntity mpPositionsEntity : listPosition) {            mapPosition.put(mpPositionsEntity.getPosName(), mpPositionsEntity.getPosId());        }        List<MpOrganizationsEntity> listOrg = employeesRepositoryImpl.findAll(MpOrganizationsEntity.class);        Map<String, Long> mapOrg = new HashMap<>();        for (MpOrganizationsEntity mpOrganizationsEntity : listOrg) {            mapOrg.put(mpOrganizationsEntity.getOrgName(), mpOrganizationsEntity.getOrgId());        }        // lay danh sach nguoi quan ly truc tiep        List<String> listEmpManager = new ArrayList<>();        List<String> listPersonalId = new ArrayList<>();        for (Object[] obj : dataList) {            String empManagerCode = ((String) obj[18]);            if (!Utils.isNullOrEmpty(empManagerCode)) {                listEmpManager.add(empManagerCode);            }            String personalId = ((String) obj[20]);            if (!Utils.isNullOrEmpty(personalId)) {                listPersonalId.add(personalId);            }        }        Map<String, Long> mapManager = employeesRepositoryImpl.getMapEmpByCodes(listEmpManager);        Map<String, Long> mapPersonalId = employeesRepositoryImpl.getMapEmpPersonalIdByCodes(listPersonalId);        Date currentDate = new Date();        for (Object[] obj : dataList) {            int col = 1;            HrEmployeesEntity employeeEntity = new HrEmployeesEntity();            String fullName = ((String) obj[col++]);            employeeEntity.setFullName(Utils.filterEmployeeName(fullName));            employeeEntity.setEmail((String) obj[col++]);            // validate gioi tinh            String gender = ((String) obj[col]).toLowerCase();            if (mapGender.get(gender) == null) {                importExcel.addError(row, col, I18n.getMessage("import.input.invalid.lookup"), gender);            } else {                employeeEntity.setGenderCode(mapGender.get(gender));            }            col++;            employeeEntity.setDateOfBirth((Date) obj[col++]);            // validate tinh trang hon nhan            String maritalStatus = ((String) obj[col]).toLowerCase();            if (mapMaritalStatus.get(maritalStatus) == null) {                importExcel.addError(row, col, I18n.getMessage("import.input.invalid.lookup"), maritalStatus);            } else {                employeeEntity.setMaritalStatusCode(mapMaritalStatus.get(maritalStatus));            }            col++;            employeeEntity.setMobileNumber((String) obj[col++]);            employeeEntity.setCompanyPhone((String) obj[col++]);            employeeEntity.setPersonalEmail((String) obj[col++]);            // validate quoc tich            String nation = ((String) obj[col]).toLowerCase();            if (mapNation.get(nation) == null) {                importExcel.addError(row, col, I18n.getMessage("import.input.invalid.lookup"), nation);            } else {                employeeEntity.setNationCode(mapNation.get(nation));            }            col++;            // validate dan toc            String ethnic = ((String) obj[col]).toLowerCase();            if (mapEthnic.get(ethnic) == null) {                importExcel.addError(row, col, I18n.getMessage("import.input.invalid.lookup"), ethnic);            } else {                employeeEntity.setEthnicCode(mapEthnic.get(ethnic));            }            col++;            // validate ton giao            String religion = ((String) obj[col]).toLowerCase();            if (mapReligion.get(religion) == null) {                importExcel.addError(row, col, I18n.getMessage("import.input.invalid.lookup"), religion);            } else {                employeeEntity.setReligionCode(mapReligion.get(religion));            }            col++;            // lưu thong tin cong viec            HrWorkProcessEntity wpEntity = new HrWorkProcessEntity();            wpEntity.setFromDate((Date) obj[col++]);            //validate doi tuong            String empType = ((String) obj[col]).toLowerCase();            if (mapEmpType.get(empType) == null) {                importExcel.addError(row, col, I18n.getMessage("import.input.invalid.lookup"), empType);            } else {                employeeEntity.setEmpTypeCode(mapEmpType.get(empType));                wpEntity.setEmpTypeCode(mapEmpType.get(empType));            }            col++;            //validate loai QD            String documentType = ((String) obj[col]).toLowerCase();            if (mapDocumentType.get(documentType) == null) {                importExcel.addError(row, col, I18n.getMessage("import.input.invalid.lookup"), documentType);            } else {                wpEntity.setDocumentTypeId(mapDocumentType.get(documentType));            }            col++;            String orgName = (String) obj[col];            if (mapOrg.get(orgName) == null) {                importExcel.addError(row, col, I18n.getMessage("import.input.invalid.lookup"), orgName);            } else {                wpEntity.setOrganizationId(mapOrg.get(orgName));            }            col++;            // validate chuc danh            String posName = (String) obj[col];            if (mapPosition.get(posName) == null) {                importExcel.addError(row, col, I18n.getMessage("import.input.invalid.lookup"), posName);            } else {                wpEntity.setPositionId(mapPosition.get(posName));            }            col++;            // validate level            String level = (String) obj[col];            if (mapLevel.get(level) == null) {                importExcel.addError(row, col, I18n.getMessage("import.input.invalid.lookup"), level);            } else {                wpEntity.setPositionLevel(mapLevel.get(level));            }            col++;            // validate nguoi quan ly truc tiep            HrManagerProcessEntity managerProcessEntity = null;            String empManagerCode = (String) obj[col];            if (Utils.isNullOrEmpty(empManagerCode)) {                wpEntity.setManagerId(null);            } else if (mapManager.get(empManagerCode) == null) {                importExcel.addError(row, col, I18n.getMessage("employee.validate.managerInvalid", empManagerCode), empManagerCode);            } else {                managerProcessEntity = new HrManagerProcessEntity();                managerProcessEntity.setFlagStatus(Constants.STATUS.IS_ACTIVE);                managerProcessEntity.setManagerId(mapManager.get(empManagerCode));                managerProcessEntity.setFromDate(wpEntity.getFromDate());                managerProcessEntity.setCreateDate(currentDate);                managerProcessEntity.setCreatedBy(Utils.getUserNameLogin(authentication));                wpEntity.setManagerId(mapManager.get(empManagerCode));            }            col++;            String personalIdType = (String) obj[col];            String personalId = (String) obj[col + 1];            if (!Utils.isNullOrEmpty(personalIdType) && !Utils.isNullOrEmpty(personalId)) {                if (mapPersonalIdType.get(personalIdType) == null) {                    importExcel.addError(row, col, I18n.getMessage("import.input.invalid.lookup"), personalIdType);                } else {                    employeeEntity.setPersonalIdTypeCode(personalIdType);                    employeeEntity.setPersonalId((String) obj[col + 1]);                    employeeEntity.setPersonalIdDate((Date) obj[col + 2]);                    employeeEntity.setPersonalIdPlace((String) obj[col + 3]);                    wpEntity.setPositionLevel(mapLevel.get(level));                }            }            col = col + 3;            // validate thong tin dinh dang//            if (!empCode.contains("MB")) {//                importExcel.addError(row, col, I18n.getMessage("msg.bad.request"), empCode);//            }//            employeeEntity.setEmployeeCode(empCode);            employeeEntity.setFullName(((String) obj[2]));            employeeEntity.setOrganizationId(1L);            listSave.add(employeeEntity);            row++;        }        if (importExcel.hasError()) {// co loi xay ra            ImportResultDTO importResultBean = new ImportResultDTO();            importResultBean.setErrorFile(importExcel.getFileErrorDescription(files, fileStorageConfig.getExportFolder(), authentication));            importResultBean.setErrorList(importExcel.getErrorList());            return ResponseUtils.getResponseEntity(ErrorApp.INVALID_FILE, importResultBean);        } else {// thuc hien insert vao DB            employeesRepositoryJPA.saveAll(listSave);            return ResponseUtils.getResponseEntity(ErrorApp.SUCCESS);        }    }    @Override    public ResponseEntity<Object> importUpdateEmployee(MultipartFile files, Authentication authentication, HttpServletRequest req) throws Exception {        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.    }    @Override    public String exportTemplateImportUpdateEmployee(Authentication authentication) throws Exception {        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.    }    @Override    public ResponseEntity<Object> exportPersonalEmployee(EmployeesDTO dto, Authentication authentication) {        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.    }}