/* * Copyright (C) 2022 HRPLUS. All rights reserved. * EcoIT. Use is subject to license terms. */package vn.com.mbbank.controllers;import javax.validation.Valid;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.security.core.Authentication;import org.springframework.web.bind.annotation.DeleteMapping;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import vn.com.mbbank.dto.EmployeesDTO;import vn.com.mbbank.dto.RewardRecordsDTO;import vn.com.mbbank.entities.HrRewardRecordsEntity;import vn.com.mbbank.services.RewardRecordsService;import vn.com.mbbank.utils.Constants;import vn.com.mbbank.utils.ResponseUtils;import vn.com.mbbank.utils.Utils;@RestController@RequestMapping(Constants.REQUEST_MAPPING_PREFIX)public class RewardRecordsController {    @Autowired    private RewardRecordsService rewardRecordsService;    @GetMapping(value = "/v1/reward-records/employees/{employeeId}", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> getListDataByEmpId(Authentication authentication,            @PathVariable Long employeeId,            RewardRecordsDTO rewardRecordsDTO    ) {        rewardRecordsDTO.setEmployeeId(employeeId);        Object resultObj = rewardRecordsService.getListDataByEmpId(rewardRecordsDTO, authentication);        return ResponseUtils.getResponseSucessEntity(resultObj);    }    @PostMapping(value = "/v1/reward-records", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> saveData(Authentication authentication,            @Valid @RequestBody RewardRecordsDTO rewardRecordsDTO    ) throws Exception {        rewardRecordsService.saveData(rewardRecordsDTO, authentication);        return ResponseUtils.getResponseSucessEntity(null);    }    @DeleteMapping(value = "/v1/reward-records/{id}", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> deleteData(Authentication authentication,            @PathVariable Long id    ) throws Exception {        return rewardRecordsService.deleteData(id, authentication);    }    @GetMapping(value = "/v1/reward-records/{id}", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> getDataById(Authentication authentication,            @PathVariable Long id    ) throws Exception {        HrRewardRecordsEntity entity = (HrRewardRecordsEntity) rewardRecordsService.getDataById(id, authentication);        if(entity == null) {            return ResponseUtils.getResponseSucessEntity(null);        }        RewardRecordsDTO dto = new RewardRecordsDTO();        Utils.copyProperties(dto, entity);        return ResponseUtils.getResponseSucessEntity(dto);    }    @GetMapping(value = "/v1/reward-records", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> searchRewardRecords(Authentication authentication,                                                      EmployeesDTO dto) throws Exception {        return rewardRecordsService.searchRewardRecords(dto, authentication);    }}