/* * Copyright (C) 2022 HRPLUS. All rights reserved. * EcoIT. Use is subject to license terms. */package vn.com.mbbank.controllers;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.security.core.Authentication;import org.springframework.web.bind.annotation.*;import vn.com.mbbank.dto.EmployeesDTO;import vn.com.mbbank.dto.WorkedOutsidesDTO;import vn.com.mbbank.entities.HrWorkedOutsidesEntity;import vn.com.mbbank.services.WorkedOutsidesService;import vn.com.mbbank.utils.Constants;import vn.com.mbbank.utils.ResponseUtils;import vn.com.mbbank.utils.Utils;import javax.validation.Valid;/** * Lop impl repository * * @author author * @since 1.0 * @version 1.0 */@RestController@RequestMapping(Constants.REQUEST_MAPPING_PREFIX)public class WorkedOutsidesController {    @Autowired    private WorkedOutsidesService workedOutsidesService;    @GetMapping(value = "/v1/worked-outsides/employees/{employeeId}", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> getListDataByEmpId(Authentication authentication,            @PathVariable Long employeeId,            WorkedOutsidesDTO workedOutsidesDTO    ) {        workedOutsidesDTO.setEmployeeId(employeeId);        Object resultObj = workedOutsidesService.getListDataByEmpId(workedOutsidesDTO, authentication);        return ResponseUtils.getResponseSucessEntity(resultObj);    }    @PostMapping(value = "/v1/worked-outsides", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> saveData(Authentication authentication,            @Valid @RequestBody WorkedOutsidesDTO workedOutsidesDTO    ) throws Exception {        workedOutsidesService.saveData(workedOutsidesDTO, authentication);        return ResponseUtils.getResponseSucessEntity(null);    }    @DeleteMapping(value = "/v1/worked-outsides/{id}", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> deleteData(Authentication authentication,            @PathVariable Long id    ) throws Exception {        return workedOutsidesService.deleteData(id, authentication);    }    @GetMapping(value = "/v1/worked-outsides/{id}", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> getDataById(Authentication authentication,            @PathVariable Long id    ) throws Exception {        HrWorkedOutsidesEntity entity = (HrWorkedOutsidesEntity) workedOutsidesService.getDataById(id, authentication);        if(entity == null) {            return ResponseUtils.getResponseSucessEntity(null);        }        WorkedOutsidesDTO dto = new WorkedOutsidesDTO();        Utils.copyProperties(dto, entity);        return ResponseUtils.getResponseSucessEntity(dto);    }    @GetMapping(value = "/v1/worked-outsides", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> searchWorkedOutsides(Authentication authentication, EmployeesDTO employeesDTO) {        return workedOutsidesService.searchWorkedOutsides(employeesDTO);    }}