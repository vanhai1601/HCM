package vn.com.mbbank.controllers;import java.io.IOException;import javax.servlet.http.HttpServletRequest;import javax.validation.Valid;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import vn.com.mbbank.services.BankAccountsService;import vn.com.mbbank.services.EmployeesService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.MediaType;import org.springframework.security.core.Authentication;import org.springframework.http.ResponseEntity;import vn.com.mbbank.dto.EmployeesDTO;import vn.com.mbbank.dto.HrEmployeeInfosDTO;import vn.com.mbbank.dto.InfoChangesDTO;import vn.com.mbbank.dto.ParamBankAccountDTO;import vn.com.mbbank.dto.PersonalIDDTO;import vn.com.mbbank.dto.PersonalInfoDTO;import vn.com.mbbank.services.InfoChangesService;import vn.com.mbbank.services.PersonalIdentitiesService;import vn.com.mbbank.utils.Constants;import vn.com.mbbank.utils.ResponseUtils;/** * Autogen class: Lớp thao tác danh sach nhan vien * * @author ToolGen * @date Sun Mar 20 21:28:46 ICT 2022 */@RestController@RequestMapping(Constants.REQUEST_MAPPING_PREFIX)public class EmployeesController {    @Autowired    private EmployeesService employeesService;    @Autowired    private PersonalIdentitiesService personalIdentitiesService;    @Autowired    private BankAccountsService bankAccountsService;    @Autowired    private InfoChangesService infoChangesService;    @GetMapping(value = "/v1/employees/{employeeId}/personal-information", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> getPersonalInfomation(Authentication authentication,            @PathVariable Long employeeId) throws Exception {        EmployeesDTO resultObj = employeesService.getPersonalInformation(employeeId);        return ResponseUtils.getResponseSucessEntity(resultObj);    }    @PostMapping(value = "/v1/employees/{employeeId}/personal-information", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> saveData(Authentication authentication,            @Valid @RequestBody PersonalInfoDTO dto    ) throws Exception {        return employeesService.savePersonalInformation(dto, authentication);    }    @GetMapping(value = "/v1/employees/{employeeId}/identities", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> getIdentities(Authentication authentication,            @PathVariable Long employeeId) {        Object resultObj = personalIdentitiesService.getPersonalIdentities(employeeId);        return ResponseUtils.getResponseSucessEntity(resultObj);    }    @PostMapping(value = "/v1/employees/{employeeId}/identities", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> saveIdentities(Authentication authentication,            @PathVariable Long employeeId,            @Valid @RequestBody PersonalIDDTO personalIDDTO) throws Exception {        return personalIdentitiesService.saveData(personalIDDTO, employeeId, authentication);    }    @GetMapping(value = "/v1/employees/{employeeId}/contact-info", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> getContactInfo(Authentication authentication,            @PathVariable Long employeeId) {        Object resultObj = employeesService.getContactInfo(employeeId);        return ResponseUtils.getResponseSucessEntity(resultObj);    }    @PostMapping(value = "/v1/employees/{employeeId}/contact-info", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> saveContactInfo(Authentication authentication,            @PathVariable Long employeeId,            @Valid @RequestBody HrEmployeeInfosDTO dto) throws Exception {        dto.setEmployeeId(employeeId);        return employeesService.saveContactInfo(dto, authentication);    }    @GetMapping(value = "/v1/employees/{employeeId}/bank-accounts", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> getBankAccounts(Authentication authentication,            @PathVariable Long employeeId) {        Object resultObj = bankAccountsService.getBankAccounts(employeeId);        return ResponseUtils.getResponseSucessEntity(resultObj);    }    @PostMapping(value = "/v1/employees/{employeeId}/bank-accounts", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> saveBankAccounts(Authentication authentication,            @PathVariable Long employeeId,            @Valid @RequestBody ParamBankAccountDTO dto) throws Exception {        return bankAccountsService.saveBankAccounts(dto, employeeId, authentication);    }    @GetMapping(value = "/v1/employees/{employeeId}/party-army", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> getPartyArmy(Authentication authentication,            @PathVariable Long employeeId) {        Object resultObj = employeesService.getPartyArmy(employeeId);        return ResponseUtils.getResponseSucessEntity(resultObj);    }    @PostMapping(value = "/v1/employees/{employeeId}/party-army", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> savePartyArmy(Authentication authentication,            @PathVariable Long employeeId,            @RequestBody HrEmployeeInfosDTO dto) throws Exception {        dto.setEmployeeId(employeeId);        return employeesService.savePartyArmy(dto, authentication);    }    @GetMapping(value = "/v1/employees/{employeeId}/info-changes", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> getInfoChanges(Authentication authentication,            @PathVariable Long employeeId, InfoChangesDTO dto) {        dto.setEmployeeId(employeeId);        Object resultObj = infoChangesService.getInfoChanges(dto);        return ResponseUtils.getResponseSucessEntity(resultObj);    }    @DeleteMapping(value = "/v1/employees/{employeeId}/avatar", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> deleteAvatar(Authentication authentication, @PathVariable Long employeeId) {        return employeesService.deleteAvatar(employeeId, authentication);    }    @PostMapping(value = "/v1/employees/{employeeId}/avatar", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> uploadAvatar(Authentication authentication,            @PathVariable Long employeeId,            @RequestBody MultipartFile fileAvatar) {        return employeesService.uploadAvatar(employeeId, fileAvatar, authentication);    }    @GetMapping(value = "/v1/employees/{employeeId}/avatar", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> getAvatar(@PathVariable Long employeeId) throws IOException {        return employeesService.getAvatar(employeeId);    }    @GetMapping(value = "/v1/employees/data-picker", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> dataPicker(EmployeesDTO employeesDTO) throws IOException {        return employeesService.getEmpDataPicker(employeesDTO);    }    @GetMapping(value = "/v1/employees/personal-information", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> searchPersonalEmployee(Authentication authentication,            EmployeesDTO dto) throws Exception {        return employeesService.searchPersonalEmployee(dto, authentication);    }        @RequestMapping(value = "/v1/employees/import-add", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> importAddEmployee(Authentication authentication, HttpServletRequest req,            @RequestPart(value = "file", required = true) MultipartFile file) throws Exception {        return employeesService.importAddEmployee(file, authentication, req);    }    @RequestMapping(value = "/v1/employees/export-template-add", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> exportTemplateImportAddEmployee(Authentication authentication) throws Exception {        return ResponseUtils.getResponseFileEntity(employeesService.exportTemplateImportAddEmployee(authentication));    }    }