/* * Copyright (C) 2022 HRPLUS. All rights reserved. * EcoIT. Use is subject to license terms. */package vn.com.mbbank.controllers;import javax.servlet.http.HttpServletRequest;import javax.validation.Valid;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.security.core.Authentication;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import vn.com.mbbank.dto.AllowanceProcessDTO;import vn.com.mbbank.dto.EmployeesDTO;import vn.com.mbbank.entities.HrAllowanceProcessEntity;import vn.com.mbbank.services.AllowanceProcessService;import vn.com.mbbank.utils.Constants;import vn.com.mbbank.utils.ResponseUtils;import vn.com.mbbank.utils.Utils;/** * Lop impl repository * * @author author * @since 1.0 * @version 1.0 */@RestController@RequestMapping(Constants.REQUEST_MAPPING_PREFIX)public class AllowanceProcessController {    @Autowired    private AllowanceProcessService allowanceProcessService;    @GetMapping(value = "/v1/allowance-processes/employees/{employeeId}", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> getListDataByEmpId(Authentication authentication,            @PathVariable Long employeeId,            AllowanceProcessDTO allowanceProcessDTO    ) {        allowanceProcessDTO.setEmployeeId(employeeId);        Object resultObj = allowanceProcessService.getListDataByEmpId(allowanceProcessDTO, authentication);        return ResponseUtils.getResponseSucessEntity(resultObj);    }    @PostMapping(value = "/v1/allowance-processes", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> saveData(Authentication authentication,            @Valid @RequestBody AllowanceProcessDTO allowanceProcessDTO    ) throws Exception {        return allowanceProcessService.saveData(allowanceProcessDTO, authentication);    }    @DeleteMapping(value = "/v1/allowance-processes/{id}", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> deleteData(Authentication authentication,            @PathVariable Long id    ) throws Exception {        return allowanceProcessService.deleteData(id, authentication);    }    @GetMapping(value = "/v1/allowance-processes/{id}", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> getDataById(Authentication authentication,            @PathVariable Long id    ) throws Exception {        HrAllowanceProcessEntity entity = (HrAllowanceProcessEntity) allowanceProcessService.getDataById(id, authentication);        if (entity == null) {            return ResponseUtils.getResponseSucessEntity(null);        }        AllowanceProcessDTO dto = new AllowanceProcessDTO();        Utils.copyProperties(dto, entity);        return ResponseUtils.getResponseSucessEntity(dto);    }    @GetMapping(value = "/v1/allowance-processes", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> searchAllowanceProcess(Authentication authentication,            EmployeesDTO dto) throws Exception {        return allowanceProcessService.searchAllowanceProcess(dto, authentication);    }    @RequestMapping(value = "/v1/allowance-processes/export-template-add", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> exportTemplateImportAddAllowanceProcess(Authentication authentication) throws Exception {        return ResponseUtils.getResponseFileEntity(allowanceProcessService.exportTemplateImportAddAllowanceProcess(authentication));    }    @RequestMapping(value = "/v1/allowance-processes/import-add", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<Object> importAddAllowanceProcess(Authentication authentication, HttpServletRequest req,                                                          @RequestPart(value = "file", required = true) MultipartFile file) throws Exception {        return allowanceProcessService.importAddAllowanceProcess(file, authentication, req);    }}