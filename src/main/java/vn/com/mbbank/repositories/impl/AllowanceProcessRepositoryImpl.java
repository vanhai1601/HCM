package vn.com.mbbank.repositories.impl;import vn.com.mbbank.core.dto.response.BaseResultSelect;import vn.com.mbbank.core.repositories.impl.BaseRepositoryImpl;import vn.com.mbbank.dto.AllowanceProcessDTO;import org.springframework.stereotype.Repository;import java.util.HashMap;import java.util.List;import vn.com.mbbank.dto.ContractProcessDTO;import vn.com.mbbank.dto.EmployeesDTO;import vn.com.mbbank.entities.HrAllowanceProcessEntity;import vn.com.mbbank.utils.Constants;import vn.com.mbbank.utils.QueryUtils;import vn.com.mbbank.utils.Utils;/** * Autogen class Repository Impl: Lớp thao tác danh sach qua trinh phu cap nhan * vien * * @author ToolGen * @date Sun Mar 20 22:26:14 ICT 2022 */@Repositorypublic class AllowanceProcessRepositoryImpl extends BaseRepositoryImpl {    /**     * Lay danh sach qua trinh phu cap nhan vien     *     * @param dto: params client truyen len     * @return     */    public BaseResultSelect getAllowanceProcess(AllowanceProcessDTO dto) {        StringBuilder sql = new StringBuilder();        sql.append("SELECT a.allowance_process_id allowanceProcessId,"                + "    a.from_date fromDate,"                + "    a.to_date toDate,"                + "    a.allowance_type_code allowanceTypeCode,"                + "    vl.label allowanceTypeName,"                + "    a.amount_money amountMoney,"                + "    a.note note"                + " FROM hr_allowance_process a "                + " LEFT JOIN v_lookup vl ON vl.code = a.allowance_type_code AND vl.type_code = :typeCode"                + " WHERE a.employee_id = :employeeId AND NVL(a.flag_status, " + Constants.STATUS.IS_ACTIVE + ") = :flagStatus"                + " ORDER BY a.from_date DESC");        HashMap<String, Object> params = new HashMap<>();        params.put("typeCode", Constants.LOOKUP_CODES.LOAI_PHU_CAP);        params.put("employeeId", dto.getEmployeeId());        params.put("flagStatus", Constants.STATUS.IS_ACTIVE);        return getListPagination(sql.toString(), params, dto.getStartRecord(), dto.getPageSize(), AllowanceProcessDTO.class);    }            /**     * Kiem tra su lien tuc cua qua trinh.     *     * @param inputDTO param     * @return true neu co loi     */    public boolean isConflictProcess(AllowanceProcessDTO inputDTO) {        StringBuilder sql = new StringBuilder("  SELECT sp.from_date fromDate, sp.to_date toDate "                + " FROM hr_allowance_process sp "                + " WHERE sp.employee_id = :employeeId "                + " AND sp.allowance_process_id != :allowanceProcessId "                + " AND NVL(sp.flag_status, :flagStatus) = :flagStatus "                + " AND (sp.to_date IS NULL OR :fromDate <= sp.to_date) "                + (inputDTO.getToDate() == null ? "" : " AND sp.from_date <= :toDate"));        HashMap<String, Object> params = new HashMap<>();        params.put("employeeId", inputDTO.getEmployeeId());        params.put("allowanceProcessId", Utils.NVL(inputDTO.getAllowanceProcessId(), 0L));        params.put("flagStatus", Constants.STATUS.IS_ACTIVE);        params.put("fromDate", inputDTO.getFromDate());        if (inputDTO.getToDate() != null) {            params.put("toDate", inputDTO.getToDate());        }        List<ContractProcessDTO> lst =  getListData(sql.toString(), params, ContractProcessDTO.class);        if (lst == null || lst.isEmpty()) {            return false;        } else if (lst.size() > 1) {            return true;        } else if (lst.size() == 1) {            ContractProcessDTO dto = lst.get(0);            if (dto.getToDate() != null || !dto.getFromDate().before(inputDTO.getFromDate())) {                return true;            }        }        return false;    }    public HrAllowanceProcessEntity getAllowanceProcessByDate(AllowanceProcessDTO dto) {        StringBuilder sql = new StringBuilder();        sql.append("SELECT *"                + " FROM hr_allowance_process a "                + " WHERE a.employee_id = :employeeId "                + " AND NVL(a.flag_status, :flagStatus) = :flagStatus"                + " AND a.from_date <= :inputDate "                + " AND (a.to_date >= :inputDate OR a.to_date IS NULL )");        HashMap<String, Object> params = new HashMap<>();        params.put("inputDate", dto.getFromDate());        params.put("employeeId", dto.getEmployeeId());        params.put("flagStatus", Constants.STATUS.IS_ACTIVE);        return getFirstData(sql.toString(), params, HrAllowanceProcessEntity.class);    }    /**     * Tiem kiem dien bien phu cap     * @param employeesDTO     * @return     */    public BaseResultSelect searchAllowanceProcess(EmployeesDTO employeesDTO) {        StringBuilder sql = new StringBuilder(" SELECT e.employee_id,"                + " e.employee_code,"                + " e.full_name,"                + " e.flag_status,"                + " NVL(mo.full_name, mo.org_name) orgName,"                + " hap.from_date fromDate,"                + " hap.to_date toDate,"                + " hap.amount_money amountMoney,"                + " vl.label allowanceTypeName"                + " FROM hr_employees e"                + " LEFT JOIN mp_organizations mo ON mo.org_id = e.organization_id"                + " JOIN hr_allowance_process hap ON hap.employee_id = e.employee_id"                + " LEFT JOIN v_lookup vl ON vl.code = hap.allowance_type_code AND vl.type_code = :typeCode"                + " WHERE 1 = 1");        HashMap<String, Object> params = new HashMap<>();        params.put("typeCode", Constants.LOOKUP_CODES.LOAI_PHU_CAP);        QueryUtils.filter(employeesDTO.getEmployeeCode(), sql, params, "e.employee_code");        QueryUtils.filter(employeesDTO.getFullName(), sql, params, "e.full_name");        QueryUtils.filterEq(employeesDTO.getEmpTypeCode(), sql, params, "e.emp_type_code");        QueryUtils.filter(employeesDTO.getFlagStatus(), sql, params, "e.flag_status");        QueryUtils.filter(employeesDTO.getListStatus(), sql, params, "e.flag_status");        if (!Utils.isNullObject(employeesDTO.getOrganizationId())) {            sql.append(" AND mo.path_id LIKE :orgId");            params.put("orgId", "%/" + employeesDTO.getOrganizationId() + "/%");        }        if (employeesDTO.getListDateOfBirth() != null && !employeesDTO.getListDateOfBirth().isEmpty()) {            QueryUtils.filterGe(Utils.convertStringToDate(employeesDTO.getListDateOfBirth().get(0)), sql, params, "e.date_of_birth");            QueryUtils.filterLe(employeesDTO.getListDateOfBirth().size() > 1 ? Utils.convertStringToDate(employeesDTO.getListDateOfBirth().get(1)) : null, sql, params, "e.date_of_birth");        }        if (employeesDTO.getListMonthOfBirth() != null && !employeesDTO.getListMonthOfBirth().isEmpty()) {            QueryUtils.filterGe(employeesDTO.getListMonthOfBirth().get(0), sql, params, "MONTH(e.date_of_birth)");            QueryUtils.filterLe(employeesDTO.getListMonthOfBirth().size() > 1 ? employeesDTO.getListMonthOfBirth().get(1) : null, sql, params, "MONTH(e.date_of_birth)");        }        if (employeesDTO.getListYearOfBirth() != null && !employeesDTO.getListYearOfBirth().isEmpty()) {            QueryUtils.filterGe(employeesDTO.getListYearOfBirth().get(0), sql, params, "YEAR(e.date_of_birth)");            QueryUtils.filterLe(employeesDTO.getListYearOfBirth().size() > 1 ? employeesDTO.getListYearOfBirth().get(1) : null, sql, params, "YEAR(e.date_of_birth)");        }        QueryUtils.filter(employeesDTO.getListGender(), sql, params, "e.gender_code");        QueryUtils.filter(employeesDTO.getListReligionCode(), sql, params, "e.religion_code");        QueryUtils.filter(employeesDTO.getListEthnicCode(), sql, params, "e.ethnic_code");        QueryUtils.filter(employeesDTO.getListMaritalStatusCode(), sql, params, "e.marital_status_code");        QueryUtils.filter(employeesDTO.getPersonalId(), sql, params, "e.personal_id");        QueryUtils.filter(employeesDTO.getTaxNo(), sql, params, "e.tax_no");        QueryUtils.filter(employeesDTO.getInsuranceNo(), sql, params, "e.insurance_no");        QueryUtils.filter(employeesDTO.getMobileNumber(), sql, params, "e.mobile_number");        QueryUtils.filter(employeesDTO.getEmail(), sql, params, "e.email");        if(employeesDTO.getListMajorLevelId() != null && !employeesDTO.getListMajorLevelId().isEmpty()){            sql.append(" AND EXISTS(SELECT 1 FROM hr_employee_infos i WHERE i.employee_id = e.employee_id AND i.major_level_id IN (:listMajorLevelId))");            params.put("listMajorLevelId", employeesDTO.getListMajorLevelId());        }        QueryUtils.filter(employeesDTO.getListPositionId(), sql, params, "e.position_id");        sql.append(" ORDER BY e.employee_id");        return getListPagination(sql.toString(), params, employeesDTO.getStartRecord(), employeesDTO.getPageSize(), AllowanceProcessDTO.class);    }}