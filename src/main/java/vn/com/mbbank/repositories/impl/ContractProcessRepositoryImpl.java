package vn.com.mbbank.repositories.impl;import vn.com.mbbank.core.dto.response.BaseResultSelect;import vn.com.mbbank.core.repositories.impl.BaseRepositoryImpl;import vn.com.mbbank.dto.ContractProcessDTO;import org.springframework.stereotype.Repository;import java.util.HashMap;import java.util.List;import vn.com.mbbank.utils.Constants;import vn.com.mbbank.utils.Utils;/** * Autogen class Repository Impl: Lớp thao tác danh sach qua trinh hop dong * * @author ToolGen * @date Sun Mar 20 21:36:24 ICT 2022 */@Repositorypublic class ContractProcessRepositoryImpl extends BaseRepositoryImpl {    /**     * Lay danh sach qua trinh hop dong     *     * @param contractProcessDTO: params client truyen len     * @return     */    public BaseResultSelect getContractProcess(ContractProcessDTO contractProcessDTO) {        StringBuilder sql = new StringBuilder();        sql.append("SELECT a.contract_process_id contractProcessId,"                + "    a.from_date fromDate,"                + "    a.to_date toDate,"                + "    a.signed_date signedDate,"                + "    a.contract_type_id contractTypeId,"                + "    b.name contractTypeName,"                + "    a.contract_number contractNumber"                + " FROM hr_contract_process a"                + " LEFT JOIN hr_contract_types b ON a.contract_type_id = b.contract_type_id"                + " WHERE a.employee_id = :employeeId AND NVL(a.flag_status, " + Constants.STATUS.IS_ACTIVE + ") = :flagStatus"                + " ORDER BY a.from_date DESC");        HashMap<String, Object> params = new HashMap<>();        params.put("employeeId", contractProcessDTO.getEmployeeId());        params.put("flagStatus", Constants.STATUS.IS_ACTIVE);        return getListDataAndCount(sql, params, Utils.NVL(contractProcessDTO.getStartRecord()), Utils.NVL(contractProcessDTO.getPageSize(), 10), ContractProcessDTO.class);    }        /**     * Kiem tra su lien tuc cua qua trinh.     *     * @param contractProcessDTO param     * @return true neu co loi     */    public boolean isConflictProcess(ContractProcessDTO contractProcessDTO) {        StringBuilder sql = new StringBuilder("  SELECT sp.from_date fromDate, sp.to_date toDate "                + " FROM hr_contract_process sp "                + " WHERE sp.employee_id = :employeeId "                + " AND NVL(sp.flag_status, :flagStatus) = :flagStatus "                + " AND sp.contract_process_id != :contractProcessId "                + " AND (sp.to_date IS NULL OR :fromDate <= sp.to_date) "                + (contractProcessDTO.getToDate() == null ? "" : " AND sp.from_date <= :toDate"));        HashMap<String, Object> params = new HashMap<>();        params.put("employeeId", contractProcessDTO.getEmployeeId());        params.put("flagStatus", Constants.STATUS.IS_ACTIVE);        params.put("workProcessId", Utils.NVL(contractProcessDTO.getContractProcessId(), 0L));        params.put("fromDate", contractProcessDTO.getFromDate());        if (contractProcessDTO.getToDate() != null) {            params.put("toDate", contractProcessDTO.getToDate());        }        List<ContractProcessDTO> lst = (List<ContractProcessDTO>) getListData(sql, params, null, null, ContractProcessDTO.class);        if (lst == null || lst.isEmpty()) {            return false;        } else if (lst.size() > 1) {            return true;        } else if (lst.size() == 1) {            ContractProcessDTO dto = lst.get(0);            if (dto.getToDate() != null || !dto.getFromDate().before(contractProcessDTO.getFromDate())) {                return true;            }        }        return false;    }}