package vn.com.mbbank.repositories.impl;import org.springframework.stereotype.Repository;import vn.com.mbbank.core.dto.response.BaseResultSelect;import vn.com.mbbank.core.repositories.impl.BaseRepositoryImpl;import vn.com.mbbank.dto.EmployeeProfilesDTO;import vn.com.mbbank.utils.Constants;import vn.com.mbbank.utils.Utils;import java.util.HashMap;@Repositorypublic class EmployeeProfilesRepositoryImpl extends BaseRepositoryImpl {    public BaseResultSelect getListDataByEmpId(EmployeeProfilesDTO itemParamsEntity) {        StringBuilder sql = new StringBuilder();        sql.append("SELECT a.employee_profile_id employeeProfileId,"                + "    a.profile_type_code profileTypeCode,"                + "    vl.label profileTypeName,"                + "    a.is_hard_document isHardDocument,"                + "    a.note note,"                + "    a.created_by createdBy,"                + "    a.create_date createDate"                + " FROM hr_employee_profiles a "                + " LEFT JOIN v_lookup vl ON vl.code = a.profile_type_code AND vl.type_code = :typeCode"                + " WHERE a.employee_id = :employeeId"                + " AND a.flag_status = :flagStatus");        HashMap<String, Object> params = new HashMap<>();        params.put("typeCode", Constants.LOOKUP_CODES.LOAI_HO_SO);        params.put("employeeId", itemParamsEntity.getEmployeeId());        params.put("flagStatus", Constants.STATUS.IS_ACTIVE);        if (!Utils.isNullOrEmpty(itemParamsEntity.getProfileTypeCode())) {            sql.append(" AND (LOWER(a.profile_type_code) LIKE :profileTypeCode ESCAPE '/' OR LOWER(vl.label) LIKE :profileTypeCode ESCAPE '/')");            params.put("profileTypeCode", "%" + Utils.filterLikeKeyword(itemParamsEntity.getProfileTypeCode()) + "%");        }        sql.append(" ORDER BY a.employee_profile_id DESC");        return getListDataAndCount(sql, params, Utils.NVL(itemParamsEntity.getStartRecord()), Utils.NVL(itemParamsEntity.getPageSize(), 10), EmployeeProfilesDTO.class);    }}