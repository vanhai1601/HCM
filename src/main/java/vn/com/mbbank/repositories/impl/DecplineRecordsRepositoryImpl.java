package vn.com.mbbank.repositories.impl;import vn.com.mbbank.core.dto.response.BaseResultSelect;import vn.com.mbbank.core.repositories.impl.BaseRepositoryImpl;import vn.com.mbbank.dto.DecplineRecordsDTO;import org.springframework.stereotype.Repository;import java.util.HashMap;import vn.com.mbbank.dto.EmployeesDTO;import vn.com.mbbank.utils.Constants;import vn.com.mbbank.utils.QueryUtils;import vn.com.mbbank.utils.Utils;/** * Autogen class Repository Impl: Lớp thao tác danh sach ky luat * * @author ToolGen * @date Sun Mar 20 21:32:18 ICT 2022 */@Repositorypublic class DecplineRecordsRepositoryImpl extends BaseRepositoryImpl {    /**     * Lay danh sach ky luat     *     * @param dto: params client truyen len     * @return     */    public BaseResultSelect getDecplineRecords(DecplineRecordsDTO dto) {        StringBuilder sql = new StringBuilder();        sql.append("SELECT a.discipline_record_id disciplineRecordId,"                + "    a.signed_date signedDate,"                + "    a.employee_id employeeId,"                + "    a.discipline_method_code disciplineMethodCode,"                + "    a.discipline_level_code disciplineLevelCode,"                + "    (select vl.label from v_lookup vl where vl.code = a.discipline_method_code and vl.type_code = :disciplineMethodType ) disciplineMethodName,"                + "    (select vl.label from v_lookup vl where vl.code = a.discipline_level_code and vl.type_code = :disciplineLevelType ) disciplineLevelName,"                + "    a.reason,"                + "    a.amount,"                + "    a.note "                + " FROM hr_decpline_records a "                + " WHERE a.employee_id = :employeeId AND NVL(a.flag_status, " + Constants.STATUS.IS_ACTIVE + ") = :flagStatus");        HashMap<String, Object> hashMapParams = new HashMap<>();        hashMapParams.put("disciplineMethodType", Constants.LOOKUP_CODES.HINHTHUC_KYLUAT);        hashMapParams.put("disciplineLevelType", Constants.LOOKUP_CODES.CAP_QD_KYLUAT);        hashMapParams.put("employeeId", dto.getEmployeeId());        hashMapParams.put("flagStatus", Constants.STATUS.IS_ACTIVE);        return getListDataAndCount(sql, hashMapParams, Utils.NVL(dto.getStartRecord()), Utils.NVL(dto.getPageSize(), 10), DecplineRecordsDTO.class);    }    /**     * Tiem kiem thong tin ki luat     * @param employeesDTO     * @return     */    public BaseResultSelect searchDecplineRecords(EmployeesDTO employeesDTO) {        StringBuilder sql = new StringBuilder(" SELECT e.employee_id,"                + " e.employee_code,"                + " e.full_name,"                + " e.flag_status,"                + " NVL(mo.full_name, mo.org_name) orgName,"                + " hdr.signed_date signedDate,"                + " hdr.amount amount,"                + " hdr.reason reason,"                + " vl.label disciplineMethodName,"                + " vl1.label disciplineLevelName"                + " FROM hr_employees e"                + " LEFT JOIN mp_organizations mo ON mo.org_id = e.organization_id"                + " JOIN hr_decpline_records hdr on e.employee_id = hdr.employee_id"                + " LEFT JOIN v_lookup vl ON vl.code = hdr.discipline_method_code AND vl.type_code = :disciplineMethodType"                + " LEFT JOIN v_lookup vl1 ON vl1.code = hdr.discipline_level_code AND vl1.type_code = :disciplineLevelType"                + " WHERE 1 = 1");        HashMap<String, Object> params = new HashMap<>();        params.put("disciplineMethodType", Constants.LOOKUP_CODES.HINHTHUC_KYLUAT);        params.put("disciplineLevelType", Constants.LOOKUP_CODES.CAP_QD_KYLUAT);        QueryUtils.filter(employeesDTO.getEmployeeCode(), sql, params, "e.employee_code");        QueryUtils.filter(employeesDTO.getFullName(), sql, params, "e.full_name");        QueryUtils.filterEq(employeesDTO.getEmpTypeCode(), sql, params, "e.emp_type_code");        QueryUtils.filter(employeesDTO.getFlagStatus(), sql, params, "e.flag_status");        QueryUtils.filter(employeesDTO.getListStatus(), sql, params, "e.flag_status");        if (!Utils.isNullObject(employeesDTO.getOrganizationId())) {            sql.append(" AND mo.path_id LIKE :orgId");            params.put("orgId", "%/" + employeesDTO.getOrganizationId() + "/%");        }        if (employeesDTO.getListDateOfBirth() != null && !employeesDTO.getListDateOfBirth().isEmpty()) {            QueryUtils.filterGe(Utils.convertStringToDate(employeesDTO.getListDateOfBirth().get(0)), sql, params, "e.date_of_birth");            QueryUtils.filterLe(employeesDTO.getListDateOfBirth().size() > 1 ? Utils.convertStringToDate(employeesDTO.getListDateOfBirth().get(1)) : null, sql, params, "e.date_of_birth");        }        if (employeesDTO.getListMonthOfBirth() != null && !employeesDTO.getListMonthOfBirth().isEmpty()) {            QueryUtils.filterGe(employeesDTO.getListMonthOfBirth().get(0), sql, params, "MONTH(e.date_of_birth)");            QueryUtils.filterLe(employeesDTO.getListMonthOfBirth().size() > 1 ? employeesDTO.getListMonthOfBirth().get(1) : null, sql, params, "MONTH(e.date_of_birth)");        }        if (employeesDTO.getListYearOfBirth() != null && !employeesDTO.getListYearOfBirth().isEmpty()) {            QueryUtils.filterGe(employeesDTO.getListYearOfBirth().get(0), sql, params, "YEAR(e.date_of_birth)");            QueryUtils.filterLe(employeesDTO.getListYearOfBirth().size() > 1 ? employeesDTO.getListYearOfBirth().get(1) : null, sql, params, "YEAR(e.date_of_birth)");        }        QueryUtils.filter(employeesDTO.getListGender(), sql, params, "e.gender_code");        QueryUtils.filter(employeesDTO.getListReligionCode(), sql, params, "e.religion_code");        QueryUtils.filter(employeesDTO.getListEthnicCode(), sql, params, "e.ethnic_code");        QueryUtils.filter(employeesDTO.getListMaritalStatusCode(), sql, params, "e.marital_status_code");        QueryUtils.filter(employeesDTO.getPersonalId(), sql, params, "e.personal_id");        QueryUtils.filter(employeesDTO.getTaxNo(), sql, params, "e.tax_no");        QueryUtils.filter(employeesDTO.getInsuranceNo(), sql, params, "e.insurance_no");        QueryUtils.filter(employeesDTO.getMobileNumber(), sql, params, "e.mobile_number");        QueryUtils.filter(employeesDTO.getEmail(), sql, params, "e.email");        if(employeesDTO.getListMajorLevelId() != null && !employeesDTO.getListMajorLevelId().isEmpty()){            sql.append(" AND EXISTS(SELECT 1 FROM hr_employee_infos i WHERE i.employee_id = e.employee_id AND i.major_level_id IN (:listMajorLevelId))");            params.put("listMajorLevelId", employeesDTO.getListMajorLevelId());        }        QueryUtils.filter(employeesDTO.getListPositionId(), sql, params, "e.position_id");        sql.append(" ORDER BY e.employee_id");        return getListPagination(sql.toString(), params, employeesDTO.getStartRecord(), employeesDTO.getPageSize(), DecplineRecordsDTO.class);    }}