package vn.com.mbbank.repositories.impl;import org.springframework.stereotype.Repository;import vn.com.mbbank.core.dto.response.BaseResultSelect;import vn.com.mbbank.core.repositories.impl.BaseRepositoryImpl;import vn.com.mbbank.dto.ManagerProcessDTO;import vn.com.mbbank.dto.WorkProcessDTO;import vn.com.mbbank.utils.Constants;import vn.com.mbbank.utils.Utils;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.List;/** * Autogen class Repository Impl: Lớp thao tác danh sach qua trinh cong tac tai * MB * * @author ToolGen * @date Sun Mar 20 21:37:41 ICT 2022 */@Repositorypublic class WorkProcessRepositoryImpl extends BaseRepositoryImpl {    /**     * Lay danh sach qua trinh cong tac tai MB     *     * @param workProcessDTO: params client truyen len     * @return     */    public BaseResultSelect getWorkProcess(WorkProcessDTO workProcessDTO) {        StringBuilder sql = new StringBuilder();        sql.append("SELECT a.work_process_id workProcessId,"                + "    a.from_date fromDate,"                + "    a.to_date toDate,"                + "    vl1.label empTypeName,"                + "    hdt.name documentTypeName,"                + "    mp.pos_name positionName,"                + "    mo.org_name organizationName,"                + "    a.organization_id organizationId,"                + "    a.position_level positionLevel, "                + "    vl2.label positionLevelName"                + " FROM hr_work_process a"                + " LEFT JOIN v_lookup vl1 ON vl1.code = a.emp_type_code AND vl1.type_code = :typeCode"                + " LEFT JOIN v_lookup vl2 ON vl2.code = a.POSITION_LEVEL AND vl2.type_code = :positionLevelCode"                + " LEFT JOIN hr_document_types hdt ON a.document_type_id = hdt.document_type_id"                + " LEFT JOIN mp_positions mp ON a.position_id = mp.pos_id "                + " LEFT JOIN mp_organizations mo ON a.organization_id = mo.org_id "                + " WHERE a.employee_id = :employeeId AND NVL(a.flag_status, " + Constants.STATUS.IS_ACTIVE + ") = :flagStatus"                + " ORDER BY a.from_date DESC");        HashMap<String, Object> params = new HashMap<>();        params.put("employeeId", workProcessDTO.getEmployeeId());        params.put("typeCode", Constants.LOOKUP_CODES.DOI_TUONG_CV);        params.put("positionLevelCode", Constants.LOOKUP_CODES.LEVEL_NV);        params.put("flagStatus", Constants.STATUS.IS_ACTIVE);        return getListDataAndCount(sql, params, Utils.NVL(workProcessDTO.getStartRecord()), Utils.NVL(workProcessDTO.getPageSize(), 10), WorkProcessDTO.class);    }    public List<ManagerProcessDTO> getManagerProcess(Long employeeId, Date wpFromDate, Date wpToDate) {        HashMap<String, Object> params = new HashMap<>();        StringBuilder sql = new StringBuilder("SELECT m.manager_process_id,"                + "    m.from_date fromDate,"                + "    m.to_date toDate,"                + "    m.manager_id managerId,"                + "    e.full_name managerName"                + "    FROM hr_manager_process m"                + "    JOIN hr_employees e ON e.employee_id = m.manager_id"                + "    WHERE m.employee_id = :employeeId");        if (wpToDate == null) {            sql.append(" AND (m.to_date >= :wpFromDate OR m.to_date IS NULL)");        } else {            params.put("wpToDate", wpToDate);            sql.append(" AND (m.from_date <= :wpToDate)");            sql.append(" AND (m.to_date >= :wpFromDate OR m.to_date IS NULL)");        }        sql.append(" AND NVL(m.flag_status, ").append(Constants.STATUS.IS_ACTIVE).append(") = :flagStatus");        params.put("employeeId", employeeId);        params.put("wpFromDate", wpFromDate);        params.put("flagStatus", Constants.STATUS.IS_ACTIVE);        return (List<ManagerProcessDTO>) getListData(sql, params, null, null, ManagerProcessDTO.class);    }    /**     * Kiem tra su lien tuc cua qua trinh.     *     * @param workProcessDTO param     * @return true neu co loi     */    public boolean isConflictProcess(WorkProcessDTO workProcessDTO) {        StringBuilder sql = new StringBuilder("  SELECT sp.from_date fromDate, sp.to_date toDate "                + " FROM hr_work_process sp "                + " WHERE sp.employee_id = :employeeId "                + " AND sp.work_process_id != :workProcessId "                + " AND (sp.to_date IS NULL OR :fromDate <= sp.to_date) "                + (workProcessDTO.getToDate() == null ? "" : " AND sp.from_date <= :toDate")                + " AND NVL(sp.flag_status, " + Constants.STATUS.IS_ACTIVE + ") = :flagStatus");        HashMap<String, Object> params = new HashMap<>();        params.put("employeeId", workProcessDTO.getEmployeeId());        params.put("workProcessId", Utils.NVL(workProcessDTO.getWorkProcessId(), 0L));        params.put("fromDate", workProcessDTO.getFromDate());        params.put("flagStatus", Constants.STATUS.IS_ACTIVE);        if (workProcessDTO.getToDate() != null) {            params.put("toDate", workProcessDTO.getToDate());        }        List<WorkProcessDTO> lst = (List<WorkProcessDTO>) getListData(sql, params, null, null, WorkProcessDTO.class);        if (lst == null || lst.isEmpty()) {            return false;        } else if (lst.size() > 1) {            return true;        } else if (lst.size() == 1) {            WorkProcessDTO dto = lst.get(0);            if (dto.getToDate() != null || !dto.getFromDate().before(workProcessDTO.getFromDate())) {                return true;            }        }        return false;    }    public Object getWorkProcessById(Long workProcessId) {        StringBuilder sql = new StringBuilder(" SELECT wp.work_process_id workProcessId, "                + " wp.employee_id employeeId, "                + " wp.organization_id organizationId,    "                + " wp.position_id positionId, "                + " p.pos_name positionName, "                + " wp.job_id jobId, "                + " wp.document_no documentNo,    "                + " wp.position_level positionLevel, "                + " wp.document_type_id documentTypeId, "                + " wp.from_date fromDate,     "                + " wp.to_date toDate, "                + " wp.emp_type_code empTypeCode, "                + " wp.manager_id managerId,     "                + " wp.other_org_id otherOrgId, "                + " NVL(orgOther.full_name, orgOther.org_name) orgOtherName, "                + " wp.other_position_id otherPositionId,     "                + " otherPosition.pos_name otherPositionName,"                + " wp.signed_date signedDate,     "                + " wp.expiration_date expirationDate, "                + " wp.note note, "                + " NVL(org.full_name, org.org_name) organizationName "                + " FROM hr_work_process wp     "                + " LEFT JOIN mp_organizations orgOther ON orgOther.ORG_ID = wp.OTHER_ORG_ID     "                + " LEFT JOIN mp_organizations org ON org.ORG_ID = wp.ORGANIZATION_ID    "                + " LEFT JOIN mp_positions otherPosition ON otherPosition.POS_ID = wp.OTHER_POSITION_ID"                + " LEFT JOIN mp_positions p ON p.POS_ID = wp.position_id  "                + " WHERE wp.work_process_id = :workProcessId    "                + " AND NVL(wp.flag_status, :flagStatus) = :flagStatus");        HashMap params = new HashMap();        params.put("workProcessId", workProcessId);        params.put("flagStatus", Constants.STATUS.IS_ACTIVE);        return getFirstData(sql, params, WorkProcessDTO.class);    }    public void deleteManagerProcessByEmpId(Long employeeId, String createdBy) {        StringBuilder sql = new StringBuilder();        sql.append(" UPDATE HR_MANAGER_PROCESS SET FLAG_STATUS = :flagStatus, "                + "     CREATED_BY = :createdBy, create_date = :createDate "                + " WHERE EMPLOYEE_ID = :employeeId ");        HashMap params = new HashMap();        params.put("flagStatus", Constants.STATUS.IS_NOT_ACTIVE);        params.put("createdBy", createdBy);        params.put("createDate", new java.sql.Date(Calendar.getInstance().getTimeInMillis()));        params.put("employeeId", employeeId);        executeSqlDatabase(sql, params);    }}