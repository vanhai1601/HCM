package vn.com.mbbank.repositories.impl;import vn.com.mbbank.core.dto.response.BaseResultSelect;import vn.com.mbbank.core.repositories.impl.BaseRepositoryImpl;import org.springframework.stereotype.Repository;import java.util.HashMap;import java.util.List;import java.util.Map;import vn.com.mbbank.dto.EmployeesDTO;import vn.com.mbbank.dto.HrEmployeeInfosDTO;import vn.com.mbbank.utils.Constants;import vn.com.mbbank.utils.QueryUtils;import vn.com.mbbank.utils.Utils;/** * Autogen class Repository Impl: Lớp thao tác danh sach nhan vien * * @author ToolGen * @date Sun Mar 20 21:28:47 ICT 2022 */@Repositorypublic class EmployeesRepositoryImpl extends BaseRepositoryImpl {//    @Autowired//    private NamedParameterJdbcTemplate jdbcTemplate;    public EmployeesDTO getPersonalInfomation(Long employeeId) {        String sql = "SELECT e.employee_id employeeId,"                + "    e.employee_code employeeCode,"                + "    e.full_name fullName,"                + "    e.email,"                + "    e.gender_code genderCode,"                + "    vl1.label genderName,"                + "    e.date_of_birth dateOfBirth,"                + "    e.marital_status_code maritalStatusCode,"                + "    vl2.label maritalStatusName,"                + "    e.mobile_number mobileNumber,"                + "    e.company_phone companyPhone,"                + "    e.personal_email personalEmail,"                + "    e.nation_code nationCode,"                + "    e.image_path imagePath,"                + "    vl3.label nationName,"                + "    vl4.label ethnicName,"                + "    e.ethnic_code ethnicCode,"                + "    e.religion_code religionCode,"                + "    vl5.label religionName,"                + "    e.is_insurance_mb isInsuranceMb,"                + "    e.insurance_no insuranceNo,"                + "    e.tax_no taxNo,"                + "    p.pos_name positionName,"                + "    (select vl.label from v_lookup vl where vl.code = e.emp_type_code and vl.type_code = :typeEmpTypeCode) empTypeName,"                + "    NVL(org.full_name, org.org_name) orgName "                + " FROM hr_employees e"                + "   LEFT JOIN v_lookup vl1 ON vl1.code = e.gender_code AND vl1.type_code = :genderTypeCode"                + "   LEFT JOIN v_lookup vl2 ON vl2.code = e.marital_status_code AND vl2.type_code = :maritalTypeCode"                + "   LEFT JOIN v_lookup vl3 ON vl3.code = e.nation_code AND vl3.type_code = :nationTypeCode"                + "   LEFT JOIN v_lookup vl4 ON vl4.code = e.ethnic_code AND vl4.type_code = :ethnicTypeCode"                + "   LEFT JOIN v_lookup vl5 ON vl5.code = e.religion_code AND vl5.type_code = :religionTypeCode"                + "   LEFT JOIN mp_organizations org ON org.org_id = e.organization_id"                + "   LEFT JOIN mp_positions p ON p.pos_id = e.position_id"                + " WHERE e.employee_id = :employeeId "                + " AND NVL(e.flag_status, :flagStatus) = :flagStatus";        HashMap<String, Object> hashMapParams = new HashMap<>();        hashMapParams.put("genderTypeCode", Constants.LOOKUP_CODES.GIOI_TINH);        hashMapParams.put("maritalTypeCode", Constants.LOOKUP_CODES.TINH_TRANG_HON_NHAN);        hashMapParams.put("nationTypeCode", Constants.LOOKUP_CODES.QUOC_GIA);        hashMapParams.put("ethnicTypeCode", Constants.LOOKUP_CODES.DAN_TOC);        hashMapParams.put("religionTypeCode", Constants.LOOKUP_CODES.TON_GIAO);        hashMapParams.put("typeEmpTypeCode", Constants.LOOKUP_CODES.DOI_TUONG_CV);        hashMapParams.put("employeeId", employeeId);        hashMapParams.put("flagStatus", Constants.STATUS.IS_ACTIVE);        return getFirstData(sql, hashMapParams, EmployeesDTO.class);    }    public HrEmployeeInfosDTO getPartyArmy(Long employeeId) {        String sql = "SELECT hei.party_date partyDate, "                + "    hei.party_official_date partyOfficialDate, "                + "    hei.party_place partyPlace, "                + "    hei.army_join_date armyJoinDate, "                + "    hei.army_level_code armyLevelCode, "                + "    vl1.label armyLevelName "                + "FROM hr_employee_infos hei "                + "LEFT JOIN v_lookup vl1 ON vl1.code = hei.army_level_code AND vl1.type_code = :typeCode "                + "WHERE hei.employee_id = :employeeId ";        HashMap<String, Object> hashMapParams = new HashMap<>();        hashMapParams.put("employeeId", employeeId);        hashMapParams.put("typeCode", Constants.LOOKUP_CODES.CAP_BAC_QUAN_HAM);        return getFirstData(sql, hashMapParams, HrEmployeeInfosDTO.class);    }    public HrEmployeeInfosDTO getContactInfo(Long employeeId) {        String sql = " SELECT  e.employee_id employeeId,  "                + "e.place_of_birth placeOfBirth,  "                + "e.pernament_address pernamentAddress,  "                + "e.current_address currentAddress,  "                + "e.original_address originalAddress,  "                + "vl1.code pernamentProvinceCode,  "                + "vl1.label pernamentProvinceName ,  "                + "vl2.code pernamentDistrictCode,  "                + "vl2.label pernamentDistrictName ,  "                + "vl3.code pernamentWardCode,  "                + "vl3.label pernamentWardName ,  "                + "hei.pernament_detail pernamentDetail,  "                + "vl4.code currentProvinceCode,  "                + "vl4.label currentProvinceName ,  "                + "vl5.code currentDistrictCode,  "                + "vl5.label currentDistrictName ,  "                + "vl6.code currentWardCode,  "                + "vl6.label currentWardName ,  "                + "hei.CURRENT_DETAIL currentDetail"                + " FROM HR_EMPLOYEES e  "                + " LEFT JOIN hr_employee_infos hei on e.employee_id  = hei.employee_id   "                + " LEFT JOIN v_lookup vl1 ON vl1.code = hei.pernament_province_code AND vl1.type_code = :provinceCode  "                + " LEFT JOIN v_lookup vl2 ON vl2.code = hei.pernament_district_code AND vl2.type_code = :districtCode  "                + " LEFT JOIN v_lookup vl3 ON vl3.code = hei.pernament_ward_code AND vl3.type_code = :wardCode  "                + " LEFT JOIN v_lookup vl4 ON vl4.code = hei.current_province_code AND vl4.type_code = :provinceCode  "                + " LEFT JOIN v_lookup vl5 ON vl5.code = hei.current_district_code AND vl5.type_code = :districtCode  "                + " LEFT JOIN v_lookup vl6 ON vl6.code = hei.current_ward_code AND vl6.type_code = :wardCode  "                + "WHERE e.employee_id = :employeeId ";        HashMap<String, Object> hashMapParams = new HashMap<>();        hashMapParams.put("employeeId", employeeId);        hashMapParams.put("provinceCode", Constants.LOOKUP_CODES.TINH);        hashMapParams.put("districtCode", Constants.LOOKUP_CODES.HUYEN);        hashMapParams.put("wardCode", Constants.LOOKUP_CODES.XA);        return getFirstData(sql, hashMapParams, HrEmployeeInfosDTO.class);    }    public BaseResultSelect searchEmployee(EmployeesDTO employeesDTO) {        StringBuilder sql = new StringBuilder(" SELECT e.employee_id employeeId,"                + " e.employee_code employeeCode,"                + " e.full_name fullName,"                + " e.email email,"                + " (select p.pos_name from mp_positions p where p.pos_id = e.position_id) positionName,"                + " (select NVL(mo.full_name, mo.org_name) from mp_organizations mo where mo.org_id = e.organization_id) orgName,"                + " e.flag_status flagStatus,"                + " e.image_path imagePath,"                + " e.date_of_birth dateOfBirth,"                + " e.personal_id personalId,"                + " e.current_address currentAddress,"                + " (select mj.job_name from mp_jobs mj where mj.job_id = e.job_id) jobName"                + " FROM hr_employees e"                + " WHERE 1 = 1");        HashMap<String, Object> params = new HashMap<>();        QueryUtils.filter(employeesDTO.getEmpTypeCode(), sql, params, "e.emp_type_code");        QueryUtils.filter(employeesDTO.getKeyword(), sql, params, "e.employee_code", "e.full_name");        sql.append(" ORDER BY e.employee_id");        return getListPagination(sql.toString(), params, employeesDTO.getStartRecord(), employeesDTO.getPageSize(), EmployeesDTO.class);    }    /**     * tim kiem thong tin co ban cua nhan vien     *     * @param employeesDTO     * @return     */    public BaseResultSelect searchPersonalEmployee(EmployeesDTO employeesDTO) {        StringBuilder sql = new StringBuilder(" SELECT e.employee_id,"                + " e.employee_code,"                + " e.full_name,"                + " (select vl.label from v_lookup vl where vl.code = e.emp_type_code and vl.type_code = :typeEmpTypeCode) empTypeName,"                + " (select p.pos_name from mp_positions p where p.pos_id = e.position_id) positionName,"                + " NVL(mo.full_name, mo.org_name) orgName,"                + " e.flag_status,"                + " e.date_of_birth dateOfBirth,"                + " (select vl.label from v_lookup vl where vl.code = e.gender_code and vl.type_code = :genderTypeCode) genderName,"                + " (select vl.label from v_lookup vl where vl.code = e.marital_status_code and vl.type_code = :maritalTypeCode) maritalStatusName,"                + " (select vl.label from v_lookup vl where vl.code = e.ethnic_code and vl.type_code = :ethnicTypeCode) ethnicName,"                + " (select vl.label from v_lookup vl where vl.code = e.religion_code and vl.type_code = :religionTypeCode) religionName,"                + " e.email,"                + " e.mobile_number,"                + " e.insurance_no,"                + " e.tax_no,"                + " e.is_insurance_mb,"                + " e.personal_id,"                + " e.place_of_birth,"                + " e.original_address,"                + " e.pernament_address,"                + " e.current_address,"                + " i.party_date,"                + " i.party_official_date"                + " FROM hr_employees e"                + " LEFT JOIN hr_employee_infos i ON i.employee_id = e.employee_id"                + " JOIN mp_organizations mo ON mo.org_id = e.organization_id"                + " WHERE 1 = 1");        HashMap<String, Object> params = new HashMap<>();        params.put("typeEmpTypeCode", Constants.LOOKUP_CODES.DOI_TUONG_CV);        params.put("genderTypeCode", Constants.LOOKUP_CODES.GIOI_TINH);        params.put("maritalTypeCode", Constants.LOOKUP_CODES.TINH_TRANG_HON_NHAN);        params.put("ethnicTypeCode", Constants.LOOKUP_CODES.DAN_TOC);        params.put("religionTypeCode", Constants.LOOKUP_CODES.TON_GIAO);        QueryUtils.filter(employeesDTO.getEmployeeCode(), sql, params, "e.employee_code");        QueryUtils.filter(employeesDTO.getFullName(), sql, params, "e.full_name");        QueryUtils.filterEq(employeesDTO.getEmpTypeCode(), sql, params, "e.emp_type_code");        QueryUtils.filter(employeesDTO.getFlagStatus(), sql, params, "e.flag_status");        QueryUtils.filter(employeesDTO.getListStatus(), sql, params, "e.flag_status");        if (!Utils.isNullObject(employeesDTO.getOrganizationId())) {            sql.append(" AND mo.path_id LIKE :orgId");            params.put("orgId", "%/" + employeesDTO.getOrganizationId() + "/%");        }        if (employeesDTO.getListDateOfBirth() != null && !employeesDTO.getListDateOfBirth().isEmpty()) {            QueryUtils.filterGe(Utils.convertStringToDate(employeesDTO.getListDateOfBirth().get(0)), sql, params, "e.date_of_birth");            QueryUtils.filterLe(employeesDTO.getListDateOfBirth().size() > 1 ? Utils.convertStringToDate(employeesDTO.getListDateOfBirth().get(1)) : null, sql, params, "e.date_of_birth");        }        if (employeesDTO.getListMonthOfBirth() != null && !employeesDTO.getListMonthOfBirth().isEmpty()) {            QueryUtils.filterGe(employeesDTO.getListMonthOfBirth().get(0), sql, params, "MONTH(e.date_of_birth)");            QueryUtils.filterLe(employeesDTO.getListMonthOfBirth().size() > 1 ? employeesDTO.getListMonthOfBirth().get(1) : null, sql, params, "MONTH(e.date_of_birth)");        }        if (employeesDTO.getListYearOfBirth() != null && !employeesDTO.getListYearOfBirth().isEmpty()) {            QueryUtils.filterGe(employeesDTO.getListYearOfBirth().get(0), sql, params, "YEAR(e.date_of_birth)");            QueryUtils.filterLe(employeesDTO.getListYearOfBirth().size() > 1 ? employeesDTO.getListYearOfBirth().get(1) : null, sql, params, "YEAR(e.date_of_birth)");        }        QueryUtils.filter(employeesDTO.getListGender(), sql, params, "e.gender_code");        QueryUtils.filter(employeesDTO.getListReligionCode(), sql, params, "e.religion_code");        QueryUtils.filter(employeesDTO.getListEthnicCode(), sql, params, "e.ethnic_code");        QueryUtils.filter(employeesDTO.getListMaritalStatusCode(), sql, params, "e.marital_status_code");        QueryUtils.filter(employeesDTO.getPersonalId(), sql, params, "e.personal_id");        QueryUtils.filter(employeesDTO.getTaxNo(), sql, params, "e.tax_no");        QueryUtils.filter(employeesDTO.getInsuranceNo(), sql, params, "e.insurance_no");        QueryUtils.filter(employeesDTO.getMobileNumber(), sql, params, "e.mobile_number");        QueryUtils.filter(employeesDTO.getEmail(), sql, params, "e.email");        QueryUtils.filter(employeesDTO.getListMajorLevelId(), sql, params, "i.major_level_id");        QueryUtils.filter(employeesDTO.getListPositionId(), sql, params, "e.position_id");        sql.append(" ORDER BY e.employee_id");        return getListPagination(sql.toString(), params, employeesDTO.getStartRecord(), employeesDTO.getPageSize(), EmployeesDTO.class);    }    public Map<String, Long> getMapEmpByCodes(List<String> listEmployeeCode) {        Map<String, Long> mapResult = new HashMap<>();        if (listEmployeeCode == null || listEmployeeCode.isEmpty()) {            return mapResult;         }                String sql = "SELECT e.employee_code, e.employee_id"                + "  FROM hr_employees e"                + "  WHERE e.employee_code IN (:listEmployeeCode)";        Map<String, Object> mapParams = new HashMap<>();        mapParams.put("listEmployeeCode", listEmployeeCode);        List<EmployeesDTO> listEmp = getListData(sql, mapParams, EmployeesDTO.class);        if (listEmp != null && !listEmp.isEmpty()) {            listEmp.forEach(employeesDTO -> {                mapResult.put(employeesDTO.getEmployeeCode(), employeesDTO.getEmployeeId());            });        }        return mapResult;    }            public Map<String, Long> getMapEmpPersonalIdByCodes(List<String> listPersonalId) {        Map<String, Long> mapResult = new HashMap<>();        if (listPersonalId == null || listPersonalId.isEmpty()) {            return mapResult;         }                String sql = "SELECT e.personal_id, e.employee_id"                + "  FROM hr_employees e"                + "  WHERE e.personal_id IN (:listPersonalId)";        Map<String, Object> mapParams = new HashMap<>();        mapParams.put("listPersonalId", listPersonalId);        List<EmployeesDTO> listEmp = getListData(sql, mapParams, EmployeesDTO.class);        if (listEmp != null && !listEmp.isEmpty()) {            listEmp.forEach(employeesDTO -> {                mapResult.put(employeesDTO.getPersonalId(), employeesDTO.getEmployeeId());            });        }        return mapResult;    }}