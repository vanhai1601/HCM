package vn.com.mbbank.repositories.impl;import vn.com.mbbank.core.dto.response.BaseResultSelect;import vn.com.mbbank.core.repositories.impl.BaseRepositoryImpl;import vn.com.mbbank.dto.BankAccountsDTO;import org.springframework.stereotype.Repository;import vn.com.mbbank.dto.EmployeesDTO;import vn.com.mbbank.utils.Constants;import vn.com.mbbank.utils.QueryUtils;import vn.com.mbbank.utils.Utils;import java.util.List;import java.util.HashMap;/** * Autogen class Repository Impl: Lớp thao tác danh sach tai khoan ngan hang cua * nhan vien * * @author ToolGen * @date Sun Mar 20 21:47:12 ICT 2022 */@Repositorypublic class BankAccountsRepositoryImpl extends BaseRepositoryImpl {    public List<BankAccountsDTO> getBankAccounts(Long employeeId) {        StringBuilder sql = new StringBuilder();        sql.append(" SELECT ba.bank_account_id bankAccountId,  "                + "    vl1.code accountTypeCode, "                + "    vl1.label accountTypeName, "                + "    ba.account_no accountNo, "                + "    ba.bank_id bankId, "                + "    cb.name bankName, "                + "    ba.bank_branch bankBranch, "                + "    ba.is_payment_account isPaymentAccount "                + " FROM hr_bank_accounts ba "                + " LEFT JOIN v_lookup vl1 ON vl1.code = ba.account_type_code AND vl1.type_code = :typeCode "                + " LEFT JOIN cat_banks cb ON ba.bank_id = cb.bank_id  "                + " WHERE employee_id = :employeeId AND NVL(ba.flag_status, " + Constants.STATUS.IS_ACTIVE + ") = :flagStatus"                + " ORDER BY ba.bank_account_id");        HashMap<String, Object> hashMapParams = new HashMap<>();        hashMapParams.put("employeeId", employeeId);        hashMapParams.put("typeCode", Constants.LOOKUP_CODES.LOAI_TAI_KHOAN);        hashMapParams.put("flagStatus", Constants.STATUS.IS_ACTIVE);        return (List<BankAccountsDTO>) getListData(sql, hashMapParams, null, null, BankAccountsDTO.class);    }    public List<BankAccountsDTO> getListAccountNoExist(String accountNo, Long bankAccountId) {        StringBuilder sql = new StringBuilder();        sql.append(" SELECT"                + "    hba.employee_id employeeId, "                + "    hba.account_no  accountNo,"                + "    he.full_name fullName, "                + "    he.employee_code employeeCode "                + " FROM "                + "    hr_bank_accounts hba "                + " LEFT JOIN hr_employees he ON hba.employee_id = he.employee_id "                + " WHERE hba.account_no = :accountNo"                + " AND hba.flag_status = :flagStatus");        HashMap<String, Object> hashMapParams = new HashMap<>();        if (bankAccountId != null && bankAccountId > 0L) {            sql.append(" AND hba.bank_account_id != :bankAccountId");            hashMapParams.put("bankAccountId", bankAccountId);        }        hashMapParams.put("accountNo", accountNo);        hashMapParams.put("flagStatus", Constants.STATUS.IS_ACTIVE);        return (List<BankAccountsDTO>) getListData(sql, hashMapParams, null, null, BankAccountsDTO.class);    }    public BaseResultSelect searchBankAccounts(EmployeesDTO employeesDTO) {        StringBuilder sql = new StringBuilder("SELECT e.employee_code, " +                "       e.full_name, " +                "       mo.org_name, " +                "       vl.label, " +                "       hba.account_no, " +                "       cb.name bankName, " +                "       hba.bank_branch, " +                "       hba.is_payment_account, " +                "       e.flag_status " +                "FROM hr_employees e " +                "JOIN mp_organizations mo ON e.organization_id = mo.org_id " +                "JOIN hr_bank_accounts hba ON hba.employee_id = e.employee_id " +                "JOIN v_lookup vl ON vl.code = hba.account_type_code " +                "AND vl.type_code = :typeCode " +                "JOIN cat_banks cb ON cb.bank_id = hba.bank_id " +                "WHERE 1 = 1 ");        HashMap<String, Object> params = new HashMap<>();        params.put("typeCode", Constants.LOOKUP_CODES.LOAI_TAI_KHOAN);        QueryUtils.filter(employeesDTO.getEmployeeCode(), sql, params, "e.employee_code");        QueryUtils.filter(employeesDTO.getFullName(), sql, params, "e.full_name");        QueryUtils.filterEq(employeesDTO.getEmpTypeCode(), sql, params, "e.emp_type_code");        QueryUtils.filter(employeesDTO.getFlagStatus(), sql, params, "e.flag_status");        QueryUtils.filter(employeesDTO.getListStatus(), sql, params, "e.flag_status");        if (!Utils.isNullObject(employeesDTO.getOrganizationId())) {            sql.append(" AND mo.path_id LIKE :orgId");            params.put("orgId", "%/" + employeesDTO.getOrganizationId() + "/%");        }        if (employeesDTO.getListDateOfBirth() != null && !employeesDTO.getListDateOfBirth().isEmpty()) {            QueryUtils.filterGe(Utils.convertStringToDate(employeesDTO.getListDateOfBirth().get(0)), sql, params, "e.date_of_birth");            QueryUtils.filterLe(employeesDTO.getListDateOfBirth().size() > 1 ? Utils.convertStringToDate(employeesDTO.getListDateOfBirth().get(1)) : null, sql, params, "e.date_of_birth");        }        if (employeesDTO.getListMonthOfBirth() != null && !employeesDTO.getListMonthOfBirth().isEmpty()) {            QueryUtils.filterGe(employeesDTO.getListMonthOfBirth().get(0), sql, params, "MONTH(e.date_of_birth)");            QueryUtils.filterLe(employeesDTO.getListMonthOfBirth().size() > 1 ? employeesDTO.getListMonthOfBirth().get(1) : null, sql, params, "MONTH(e.date_of_birth)");        }        if (employeesDTO.getListYearOfBirth() != null && !employeesDTO.getListYearOfBirth().isEmpty()) {            QueryUtils.filterGe(employeesDTO.getListYearOfBirth().get(0), sql, params, "YEAR(e.date_of_birth)");            QueryUtils.filterLe(employeesDTO.getListYearOfBirth().size() > 1 ? employeesDTO.getListYearOfBirth().get(1) : null, sql, params, "YEAR(e.date_of_birth)");        }        QueryUtils.filter(employeesDTO.getListGender(), sql, params, "e.gender_code");        QueryUtils.filter(employeesDTO.getListReligionCode(), sql, params, "e.religion_code");        QueryUtils.filter(employeesDTO.getListEthnicCode(), sql, params, "e.ethnic_code");        QueryUtils.filter(employeesDTO.getListMaritalStatusCode(), sql, params, "e.marital_status_code");        QueryUtils.filter(employeesDTO.getPersonalId(), sql, params, "e.personal_id");        QueryUtils.filter(employeesDTO.getTaxNo(), sql, params, "e.tax_no");        QueryUtils.filter(employeesDTO.getInsuranceNo(), sql, params, "e.insurance_no");        QueryUtils.filter(employeesDTO.getMobileNumber(), sql, params, "e.mobile_number");        QueryUtils.filter(employeesDTO.getEmail(), sql, params, "e.email");        if(employeesDTO.getListMajorLevelId() != null && !employeesDTO.getListMajorLevelId().isEmpty()){            sql.append(" AND EXISTS(select 1 from hr_employee_infos i where i.employee_id = e.employee_id and i.major_level_id IN (:listMajorLevelId))");            params.put("listMajorLevelId", employeesDTO.getListMajorLevelId());        }        QueryUtils.filter(employeesDTO.getListPositionId(), sql, params, "e.position_id");        sql.append(" ORDER BY e.employee_id");        return getListPagination(sql.toString(), params, employeesDTO.getStartRecord(), employeesDTO.getPageSize(), BankAccountsDTO.class);    }}